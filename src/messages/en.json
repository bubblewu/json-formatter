{
  "title": "JSON Formatter",
  "subtitle": "Online JSON Formatter, Validator, and Beautifier",
  "description": "A free online tool to format, validate, compress, and escape your JSON data.",
  "formatBtn": "Format",
  "compressBtn": "Compress",
  "clearBtn": "Clear",
  "uploadBtn": "Upload",
  "copyBtn": "Copy",
  "downloadBtn": "Download",
  "historyBtn": "History",
  "backToFormatter": "Back to Formatter",
  "removeEscapeBtn": "Remove Escape",
  "fullscreenBtn": "Full",
  "exitFullscreenBtn": "Exit Full",
  "inputLabel": "JSON Input",
  "outputLabel": "Result",
  "language": "Language",
  "lineNumbers": {
    "show": "Show Line Number",
    "hide": "Hide Line Number"
  },
  "errors": {
    "empty": "JSON cannot be empty",
    "invalid": "Invalid JSON",
    "invalidEscape": "Cannot remove escape characters, not a valid JSON string",
    "notString": "Input is not a JSON string, cannot remove escape characters",
    "suggestion": "Fix suggestion",
    "autoFixAvailable": "This error can be automatically fixed",
    "clickToFix": "Click to apply this fix",
    "applyFix": "Apply Fix"
  },
  "success": {
    "formatted": "JSON formatted successfully",
    "compressed": "JSON compressed successfully",
    "copied": "Copied to clipboard",
    "unescaped": "Successfully removed escape characters",
    "noEscapeNeeded": "String does not need unescaping",
    "fixApplied": "Fix has been applied"
  },
  "jsonErrors": {
    "unexpectedToken": "Unexpected token",
    "expected": "Expected",
    "inPosition": "in JSON at position",
    "clearMarkError": "Error clearing markers",
    "setMarkError": "Error setting markers",
    "fullscreenError": "Error in fullscreen mode",
    "saveHistoryError": "Error saving history",
    "getHistoryError": "Error getting history",
    "clearHistoryError": "Error clearing history"
  },
  "suggestions": {
    "checkSyntax": "Check your JSON syntax, especially matching brackets, braces, and quotes",
    "missingClosingBracket": "Missing closing bracket or brace",
    "missingClosingQuote": "Missing closing quote",
    "incompleteJson": "JSON is incomplete, check for missing parts",
    "missingQuotesAroundKey": "Property names need to be surrounded by double quotes",
    "trailingComma": "Trailing commas are not allowed in JSON",
    "missingComma": "Missing comma between values",
    "singleQuotes": "JSON requires double quotes instead of single quotes",
    "booleanCase": "Boolean values must be lowercase: {value}",
    "nullCase": "null value must be lowercase",
    "unescapedQuote": "Quotes inside strings need to be escaped"
  },
  "footer": {
    "copyright": "Â© 2025 JSON Formatter | Your Efficiency Helper"
  },
  "languages": {
    "en": "English",
    "zh": "Chinese",
    "ja": "Japanese",
    "ko": "Korean",
    "es": "Spanish",
    "de": "German",
    "fr": "French",
    "ru": "Russian"
  },
  "history": {
    "title": "History Records",
    "empty": "No history records",
    "noResults": "No matching records found",
    "clear": "Clear History",
    "copy": "Copy",
    "searchPlaceholder": "Search history...",
    "timeFilter": {
      "all": "All",
      "today": "Today",
      "week": "This Week",
      "month": "This Month"
    },
    "format": "Format",
    "compress": "Compress",
    "unescape": "Unescape",
    "operations": {
      "format": "Format",
      "compress": "Compress",
      "unescape": "Unescape"
    },
    "time": {
      "today": "Today {time}",
      "yesterday": "Yesterday {time}",
      "daysAgo": "{days} days ago {time}"
    }
  },
  "feedbackBtn": "Feedback",
  "feedback": {
    "title": "Feedback",
    "content": "Feedback Content",
    "contentPlaceholder": "Please enter your feedback...",
    "contact": "Contact (Optional)",
    "contactPlaceholder": "Please enter your email or other contact information",
    "submit": "Submit Feedback",
    "submitting": "Submitting...",
    "cancel": "Cancel",
    "success": "Thank you for your feedback!",
    "error": "Submission failed, please try again later",
    "validation": {
      "required": "Please fill out this field",
      "invalidEmail": "Please enter a valid email address"
    }
  },
  "showDemoBtn": "Show Demo",
  "hideDemoBtn": "Hide Demo",
  "share": "Share",
  "shareMenu": {
    "title": "Share to",
    "open": "Open share menu",
    "close": "Close share menu"
  },
  "stats": {
    "totalVisits": "Total Visits",
    "onlineUsers": "Online Users"
  },
  "breadcrumb": {
    "home": "Home",
    "history": "History",
    "contact": "Contact",
    "privacy": "Privacy Policy",
    "terms": "Terms of Use",
    "beautify": "Beautify",
    "minify": "Minify",
    "validate": "Validate",
    "json-to-xml": "JSON to XML",
    "json-to-csv": "JSON to CSV",
    "json-to-yaml": "JSON to YAML",
    "json-to-java": "JSON to Java",
    "json-to-csharp": "JSON to C#",
    "json-to-golang": "JSON to Go",
    "json-to-php": "JSON to PHP",
    "json-to-python": "JSON to Python",
    "json-to-typescript": "JSON to TypeScript",
    "faq": "FAQ",
    "about": "About",
    "sitemap": "Sitemap",
    "tutorials": "Tutorials",
    "blog": "Blog",
    "json-schema-tutorial": "JSON Schema Tutorial",
    "json-basics": "JSON Basics Tutorial",
    "json-formats": "JSON Formatting Best Practices",
    "json-vs-xml": "JSON vs XML",
    "images": {
      "og_image": "Image",
      "favicon_16x16": "Icon",
      "favicon_32x32": "Icon",
      "favicon": "Icon",
      "android_chrome_192x192": "Chrome Icon",
      "android_chrome_512x512": "Chrome Icon",
      "apple_touch_icon": "Apple Icon",
      "mstile_70x70": "MS Tile",
      "mstile_150x150": "MS Tile",
      "mstile_310x310": "MS Tile",
      "mstile_310x150": "MS Tile",
      "logo": "Logo",
      "logo_json": "JSON Logo",
      "logo_json_16x16": "JSON Logo Small",
      "logo_json_32x32": "JSON Logo Medium",
      "favicon_json": "JSON Favicon",
      "favicon_json_16x16": "JSON Favicon Small",
      "favicon_json_32x32": "JSON Favicon Medium"
    },
    "tutorials": "Tutorials",
    "json-basics": "JSON Basics",
    "json-schema": "JSON Schema",
    "json-vs-xml": "JSON vs XML",
    "json-path": "JSONPath",
    "json-api": "JSON API",
    "json-formats": "JSON Formatting",
    "json-to-code": "JSON to Code",
    "json-localstorage": "JSON and LocalStorage",
    "contact": "Contact"
  },
  "basics": {
    "pageTitle": "JSON Basics - Data Types, Syntax, and Structure",
    "introduction": {
      "description": "JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate. This tutorial will help you comprehensively understand the basics of JSON, including syntax rules, data types, and structure."
    },
    "whatIsJson": {
      "title": "What is JSON",
      "description": "JSON is a text-based, human-readable data exchange format proposed by Douglas Crockford in the early 2000s. Its full name is JavaScript Object Notation, which originated from the JavaScript language but has now become a language-independent data format supported by almost all modern programming languages.",
      "keyFeatures": {
        "title": "Key Features",
        "item1": "Lightweight - More concise than formats like XML, more efficient for transmission and parsing",
        "item2": "Self-descriptive - Clear format, easy to understand",
        "item3": "Language-independent - Libraries for handling JSON exist in almost all programming languages",
        "item4": "Text-based - Uses Unicode encoding, can represent multilingual content",
        "item5": "Structured - Supports nested data, can express complex data relationships"
      }
    },
    "jsonSyntax": {
      "title": "JSON Syntax",
      "description": "The syntax of JSON is very simple, with only a few basic rules:",
      "rule1": "Data is represented in key-value pairs, in the format \"key\": value",
      "rule2": "Data items are separated by commas",
      "rule3": "Objects (an unordered set of key-value pairs) are represented by curly braces {{}}",
      "rule4": "Arrays (an ordered collection of values) are represented by square brackets [[]]",
      "rule5": "All keys must be enclosed in double quotes",
      "completeExample": "Here is a complete example that includes various JSON elements:",
      "validJson": "This is a valid JSON object that includes strings, numbers, booleans, arrays, nested objects, and null values."
    },
    "jsonDataTypes": {
      "title": "JSON Data Types",
      "description": "JSON supports the following six data types:",
      "string": "String",
      "stringDescription": "Text data, must be enclosed in double quotes, supports escape characters.",
      "number": "Number",
      "numberDescription": "Integer or floating-point number, does not support non-numeric values (like NaN or Infinity).",
      "boolean": "Boolean",
      "booleanDescription": "true or false (must be lowercase).",
      "null": "Null",
      "nullDescription": "Represents an empty or non-existent value, using null (must be lowercase).",
      "object": "Object",
      "objectDescription": "An unordered collection of key-value pairs, keys must be strings, values can be any JSON data type.",
      "array": "Array",
      "arrayDescription": "An ordered collection of values, can contain any JSON data type, even mixed different types.",
      "noteTitle": "Important Notes",
      "noteDescription": "JSON has some important limitations that differ from other formats:",
      "noteItem1": "Does not support comments",
      "noteItem2": "All key names must be enclosed in double quotes, not single quotes",
      "noteItem3": "Does not support undefined values",
      "noteItem4": "Does not directly support date types (need to be converted to strings or numbers)",
      "noteItem5": "Does not support functions or methods"
    },
    "jsonStructure": {
      "title": "JSON Structure",
      "description": "The flexibility of JSON allows for representing complex nested data structures, including multi-layered nested objects and arrays. This makes it very suitable for representing almost any type of data.",
      "exampleDescription": "Below is an example of a more complex JSON structure, demonstrating how to organize multi-level data:",
      "exampleExplanation": "This example shows how JSON can represent complex data structures through nested objects and arrays. The product catalog contains categories, categories contain products, and products contain detailed information such as specifications and color lists."
    },
    "commonMistakes": {
      "title": "Common Mistakes",
      "description": "When working with JSON, there are some common mistakes to avoid:",
      "commonErrors": "Common JSON Syntax Errors",
      "error1": "Using single quotes instead of double quotes",
      "error1Description": "JSON requires all strings (including key names) to use double quotes.",
      "error2": "Extra commas after the last item",
      "error2Description": "JSON does not allow commas after the last element, which differs from some programming languages.",
      "error3": "Not putting quotes around property names",
      "error3Description": "All object property names must have double quotes, unlike JavaScript objects where they can be omitted.",
      "error4": "Adding comments in JSON",
      "error4Description": "JSON does not support comments; any form of comment will cause parsing errors.",
      "bestPractices": "Best Practices",
      "bestPractice1": "Use validation tools",
      "bestPractice1Description": "Always use JSON validation tools to check if your JSON is valid.",
      "bestPractice2": "Use formatting tools",
      "bestPractice2Description": "Formatting JSON can improve readability and make it easier to spot errors.",
      "bestPractice3": "Be mindful of data types",
      "bestPractice3Description": "Ensure you use the correct data types, especially distinguishing between strings and numbers.",
      "bestPractice4": "Handle escape characters carefully",
      "bestPractice4Description": "Properly escape special characters, especially quotes and backslashes within strings.",
      "bestPractice5": "Understand parsing library features",
      "bestPractice5Description": "JSON parsing libraries in different languages may have subtle differences; understand the specific behavior of the library you're using."
    },
    "toolsLibraries": {
      "title": "JSON Tools and Libraries",
      "description": "There are many tools and libraries that can help you work with JSON:",
      "onlineTools": "Online Tools",
      "tool1": "JSON Formatter",
      "tool1Description": "Format JSON data to improve readability.",
      "tool2": "JSON Validator",
      "tool2Description": "Check if JSON syntax is correct.",
      "tool3": "JSON Comparison Tool",
      "tool3Description": "Compare differences between two JSON objects.",
      "tool4": "JSON Converter",
      "tool4Description": "Convert between JSON and other formats (such as XML, CSV).",
      "programmingLibraries": "Programming Libraries",
      "library1": "JavaScript",
      "library1Item1": "Built-in JSON.parse() and JSON.stringify()",
      "library1Item2": "Lodash - Provides more JSON manipulation functionality",
      "library1Item3": "json5 - Extended version of JSON that supports comments",
      "library2": "Python",
      "library2Item1": "Built-in json module",
      "library2Item2": "simplejson - More advanced JSON library",
      "library2Item3": "ujson - High-performance JSON encoder and decoder",
      "library3": "Java",
      "library3Item1": "Jackson - Feature-rich JSON processing library",
      "library3Item2": "Gson - JSON library developed by Google",
      "library3Item3": "JSON-java - Lightweight JSON library"
    },
    "conclusion": {
      "title": "Conclusion",
      "description": "Through this tutorial, you have learned the basics of JSON, including:",
      "item1": "Basic concepts and features of JSON",
      "item2": "JSON syntax rules and data types",
      "item3": "How to create and parse complex JSON structures",
      "item4": "Common errors and best practices",
      "item5": "Useful JSON tools and libraries",
      "finalDescription": "Mastering JSON is an essential skill in modern software development. With the prevalence of APIs and data exchange, this knowledge will be frequently used throughout your development career. Continue exploring our other tutorials to learn more advanced topics about JSON."
    },
    "returnToTutorials": "Return to Tutorials List",
    "nextTutorial": "Next Tutorial: JSON Schema"
  },
  "formats": {
    "pageTitle": "JSON Formatting Best Practices",
    "introduction": {
      "title": "Why JSON Formatting is Important",
      "description": "Although JSON syntax is simple, good formatting habits are crucial for readability, maintainability, and error reduction. Whether you're writing API responses, configuration files, or data storage, following consistent formatting rules makes it easier for you and your team members to work with JSON data."
    },
    "detailedDescription": "This tutorial will introduce JSON formatting best practices, including indentation, naming conventions, data organization, and tool usage.",
    "indentation": {
      "title": "Indentation and Spacing",
      "description": "Proper indentation is key to improving JSON readability:",
      "guideline1": "Use consistent indentation (2 spaces or 4 spaces are common choices)",
      "guideline2": "Increase indentation by one level for each nested level",
      "guideline3": "Beginning and ending brackets for arrays and objects should align",
      "recommended": "Recommended practice:",
      "notRecommended": "Not recommended:"
    },
    "namingConventions": {
      "title": "Naming Conventions",
      "description": "Consistent naming conventions improve the readability and maintainability of JSON data:",
      "camelCase": "Use camelCase: This is the most common naming convention in JSON, like firstName, lastLogin",
      "avoidUnderscores": "Avoid underscores: While some APIs use snake_case, camelCase is more common in JavaScript environments",
      "descriptiveNames": "Use descriptive names: Keys should clearly express what data they contain",
      "avoidAbbreviations": "Avoid abbreviations: Use complete words unless the abbreviation is widely accepted (like ID)",
      "consistency": "Maintain consistency: Use the same naming convention throughout your project",
      "recommended": "Recommended practice:",
      "notRecommended": "Not recommended:"
    },
    "dataOrganization": {
      "title": "Data Organization",
      "description": "Properly organizing data structures can improve JSON readability and usage efficiency:",
      "groupRelated": "Group related properties: Place related properties together and use nested objects to organize complex data",
      "logicalOrder": "Arrange properties in logical order: Place IDs or names first, followed by detailed information",
      "consistentTypes": "Maintain consistent data types: For example, always use the same format for dates",
      "arrayItems": "Items in arrays should have the same structure: If an array contains objects, these objects should have the same set of properties"
    },
    "dateNumberFormats": {
      "title": "Date and Number Formats",
      "description": "Date and number formatting is crucial for data consistency:",
      "dateFormats": "Date Formats",
      "useISO": "Use standard ISO 8601 format: YYYY-MM-DDTHH:mm:ss.sssZ",
      "example": "For example: \"2023-05-15T14:30:00Z\" or \"2023-05-15\" (date only)",
      "avoidLocalized": "Avoid localized date formats, such as \"05/15/2023\", which might be interpreted differently in different regions",
      "numberFormats": "Number Formats",
      "avoidSeparators": "Avoid using thousand separators (like 1,000) in JSON",
      "currencyPrecision": "Currency values should specify precision (typically two decimal places)",
      "largeNumbers": "Consider representing large numbers (such as those beyond JavaScript's safe integer range) as strings"
    },
    "validation": {
      "title": "Validation and Checking",
      "description": "Ensure your JSON is formatted correctly and valid:",
      "useTools": "Use validation tools: Validate JSON validity with tools like JSONLint before publishing",
      "useSchema": "Use JSON Schema: Define data structures and validation rules",
      "checkErrors": "Check for common errors: Such as missing commas, extra commas, unclosed quotes, etc.",
      "autoFormat": "Automatic formatting: Use editor formatting features to maintain consistency",
      "ourTool": "You can use our JSON validation tool to check if your JSON is valid."
    },
    "compression": {
      "title": "Compression and Beautification",
      "description": "Choose appropriate formatting for different scenarios:",
      "devDebug": "Development and debugging: Use beautified format (with indentation and line breaks) for better readability",
      "production": "Production environment: Use compressed format (remove all whitespace) to reduce data size",
      "apiResponses": "API responses: Consider providing format options, allowing clients to choose between beautified or compressed formats",
      "largeFiles": "Large files: Always use compressed format for transmission and storage",
      "beautified": "Beautified format (for development):",
      "compressed": "Compressed format (for production):"
    },
    "whitespacePlacement": {
      "title": "Whitespace Placement",
      "description": "Strategic placement of whitespace improves readability:",
      "afterColons": "Add a space after colons in key-value pairs",
      "afterCommas": "Add a space after commas in arrays and objects",
      "noExtraSpaces": "Don't add spaces before colons or commas",
      "lineBreaks": "Use line breaks to separate properties and array items in beautified format",
      "recommended": "Recommended practice:",
      "notRecommended": "Not recommended:"
    },
    "securityConsiderations": {
      "title": "Security Considerations",
      "description": "Be careful when formatting JSON that might contain sensitive information:",
      "sensitiveData": "Never include sensitive data (passwords, API keys, etc.) in client-side JSON",
      "validateInput": "Always validate and sanitize JSON input from external sources",
      "avoidComments": "Remember that JSON doesn't support comments - don't use them for 'hiding' sensitive data",
      "handleErrors": "Implement proper error handling for JSON parsing failures"
    },
    "tools": {
      "title": "Formatting Tools",
      "description": "Several tools can help you maintain consistent JSON formatting:",
      "onlineTools": "Online tools:",
      "ourFormatter": "Our JSON Formatter: Format and beautify your JSON with just one click",
      "jsonlint": "JSONLint: Validate JSON and identify syntax errors",
      "editorPlugins": "Editor plugins:",
      "vscode": "VS Code: Built-in JSON formatting with Prettier integration",
      "webstorm": "WebStorm/IntelliJ IDEA: Advanced JSON support with customizable formatting options",
      "sublime": "Sublime Text: Various packages available for JSON formatting",
      "cliTools": "Command-line tools:",
      "jq": "jq: Command-line JSON processor with formatting capabilities",
      "prettier": "Prettier: Code formatter that supports JSON and many other languages"
    },
    "bestPractices": {
      "title": "Summary of Best Practices",
      "description": "To summarize the key points of JSON formatting best practices:",
      "point1": "Use consistent indentation (2 or 4 spaces)",
      "point2": "Follow consistent naming conventions (preferably camelCase)",
      "point3": "Organize related data logically and consistently",
      "point4": "Use standard formats for dates (ISO 8601) and numbers",
      "point5": "Validate JSON before using or publishing it",
      "point6": "Use beautified format for development and compressed format for production",
      "point7": "Place whitespace strategically to improve readability",
      "point8": "Consider security implications when formatting JSON",
      "point9": "Use available tools to automate and enforce formatting rules"
    },
    "conclusion": {
      "title": "Conclusion",
      "description": "Good JSON formatting practices not only make your data more readable but also reduce errors and improve maintainability. By following the guidelines in this tutorial and using the appropriate tools, you can ensure your JSON data is well-structured, consistent, and easy to work with.",
      "nextSteps": "Continue exploring our other JSON tutorials to learn more about working with JSON data in different contexts."
    }
  },
  "xmlcompare": {
    "pageTitle": "JSON vs XML Comparison",
    "introduction": {
      "title": "Introduction",
      "description": "JSON (JavaScript Object Notation) and XML (eXtensible Markup Language) are two common data exchange formats. While both are used to transmit data between different systems, they have significant differences in syntax, structure, and application scenarios."
    },
    "detailedDescription": "This tutorial will compare these two formats in detail, helping you understand their advantages and disadvantages, so you can choose the most suitable data format for your project.",
    "syntaxComparison": {
      "title": "Syntax Comparison",
      "description": "Below is a comparison of JSON and XML representing the same data:",
      "jsonFormat": "JSON Format:",
      "xmlFormat": "XML Format:"
    },
    "syntaxDifferences": {
      "description": "From the example above, you can see the main syntax differences between the two formats:",
      "item1": "JSON uses curly braces {{}} for objects and square brackets [[]] for arrays",
      "item2": "XML uses custom tags and nested structures",
      "item3": "JSON is more concise, with fewer characters",
      "item4": "XML uses opening and closing tags, making the structure clearer but more verbose"
    },
    "keyDifferences": {
      "title": "Key Differences",
      "columns": {
        "feature": "Feature",
        "json": "JSON",
        "xml": "XML"
      },
      "syntax": {
        "name": "Syntax",
        "json": "Concise, based on key-value pairs",
        "xml": "Tag-based, with opening and closing tags"
      },
      "fileSize": {
        "name": "File Size",
        "json": "Smaller",
        "xml": "Larger"
      },
      "parsingSpeed": {
        "name": "Parsing Speed",
        "json": "Faster",
        "xml": "Slower"
      },
      "dataTypes": {
        "name": "Data Types",
        "json": "Supports strings, numbers, booleans, arrays, objects, and null",
        "xml": "All data is strings, requires additional schema definitions"
      },
      "commentSupport": {
        "name": "Comment Support",
        "json": "Not supported",
        "xml": "Supported"
      },
      "namespace": {
        "name": "Namespace",
        "json": "Not supported",
        "xml": "Supported"
      },
      "readability": {
        "name": "Readability",
        "json": "Better for simple data structures",
        "xml": "Better for complex data structures"
      },
      "languageSupport": {
        "name": "Language Support",
        "json": "Native support in JavaScript, libraries in other languages",
        "xml": "Libraries available in all major programming languages"
      },
      "validation": {
        "name": "Validation",
        "json": "Via JSON Schema",
        "xml": "Via DTD, XSD"
      }
    },
    "jsonAdvantages": {
      "title": "JSON Advantages",
      "lightweight": "Lightweight: JSON files are typically smaller than equivalent XML files, saving bandwidth and storage space",
      "easyParsing": "Simple Parsing: Most programming languages have built-in or third-party libraries for JSON parsing",
      "readableWritable": "Easy to Read and Write: Simple syntax, easily understood by humans and programs",
      "javascriptIntegration": "Natural Integration with JavaScript: Especially useful in web applications",
      "fasterParsing": "Faster Parsing Speed: Especially in JavaScript environments",
      "arraySupport": "Array Support: Native support for array structures",
      "popularInApis": "Popular in APIs: Most modern web APIs use JSON as their data exchange format"
    },
    "xmlAdvantages": {
      "title": "XML Advantages",
      "validation": "Strong Validation: Provides strict data validation through DTD or XSD",
      "namespaces": "Namespace Support: Can use different XML vocabularies in the same document",
      "queryLanguage": "Rich Query Language: XPath and XQuery provide powerful query capabilities",
      "comments": "Support for Comments: Can add comments to XML documents, improving readability",
      "complexData": "Complex Data Representation: Better suited for representing complex hierarchies and mixed content",
      "ecosystem": "Mature Ecosystem: Has a large number of mature tools and technologies",
      "selfDescribing": "Self-descriptive: XML documents are typically more self-descriptive, including metadata"
    },
    "whenToUseJson": {
      "title": "When to Use JSON",
      "description": "JSON is a better choice in the following situations:",
      "webApps": "Web applications and API development",
      "fastParsing": "Scenarios requiring fast parsing",
      "simpleStructures": "Relatively simple data structures",
      "javascript": "JavaScript environments (browsers, Node.js)",
      "mobileApps": "Mobile application communication",
      "configFiles": "Configuration files (like package.json)",
      "bandwidth": "Large data volumes where bandwidth savings are important"
    },
    "whenToUseXml": {
      "title": "When to Use XML",
      "description": "XML is a better choice in the following situations:",
      "strictValidation": "Strict data validation is required",
      "complexStructures": "Complex document structures",
      "namespaceNeeded": "Need to use namespaces",
      "commentsNeeded": "Need to support comments",
      "documentOriented": "Document-oriented applications (such as Word, Excel file formats)",
      "soapServices": "SOAP Web services",
      "xsltNeeded": "Need to use XSLT to transform data"
    },
    "conversion": {
      "title": "Converting Between JSON and XML",
      "description": "Sometimes you may need to convert between the two formats. Many online tools and programming libraries can help you with this task:",
      "ourTool": "Our JSON to XML conversion tool",
      "libraries": "Programming libraries, such as xml2js in Node.js",
      "xslt": "XSLT can be used to convert XML to JSON",
      "note": "When converting, note that due to structural differences between the two formats, the converted data structure may differ from the original structure."
    },
    "conclusion": {
      "title": "Conclusion",
      "description": "JSON and XML each have their own advantages and disadvantages. The choice of format should be based on your specific needs:",
      "chooseJson": "Choose JSON if simplicity, parsing speed, and JavaScript compatibility are important",
      "chooseXml": "Choose XML if you need strict data validation, complex document structures, or namespace support",
      "modernDev": "In modern web development, JSON has become the mainstream data exchange format, especially in RESTful APIs. XML still holds an important position in enterprise applications, document systems, and scenarios requiring strict data validation.",
      "finalThought": "Understanding the advantages and disadvantages of both formats can help you make more informed technical choices in your projects."
    }
  },
  "schema": {
    "pageTitle": "JSON Schema Tutorial - Learn How to Use JSON Schema",
    "pageDescription": "Learn how to use JSON Schema to validate, document, and annotate your JSON data with this comprehensive tutorial",
    "introduction": {
      "title": "Introduction to JSON Schema",
      "description": "JSON Schema is a vocabulary that allows you to annotate and validate JSON documents. It helps you describe the structure and validation constraints of your JSON data. This tutorial will help you understand and implement JSON Schema effectively."
    },
    "basics": {
      "title": "JSON Schema Basics",
      "description": "In this section, we'll cover the fundamental concepts of JSON Schema, including its structure, data types, properties, and constraints. You'll learn how to create basic schemas to validate simple JSON documents and understand nested structures."
    },
    "validation": {
      "title": "Validation with JSON Schema",
      "description": "Validation is one of the primary purposes of JSON Schema. This section explains how JSON Schema validates data against specified constraints, how to define validation rules, and how to handle validation errors effectively."
    },
    "advanced": {
      "title": "Advanced JSON Schema Features",
      "description": "Explore advanced features of JSON Schema including references ($ref), conditional validation, format validation, and custom vocabularies. Learn how to create complex schemas for sophisticated JSON data structures."
    },
    "tools": {
      "title": "JSON Schema Tools and Libraries",
      "description": "Discover popular tools and libraries that support JSON Schema, such as Ajv for Node.js, JsonSchema.Net for web-based schema creation, and integration options with various programming languages and frameworks."
    }
  },
  "tutorialsPage": {
    "description": "Master JSON from basics to advanced with our tutorials and guides. Whether you're a beginner or a professional developer, there's content for everyone.",
    "whyLearnJson": "Why Learn JSON?",
    "webStandard": "Web Standard",
    "webStandardDesc": "JSON is the standard format for modern Web APIs and data exchange, supported by almost all programming languages.",
    "lightweight": "Lightweight & Efficient",
    "lightweightDesc": "Compared to formats like XML, JSON is lighter and faster to parse, making it ideal for front-end to back-end data transmission.",
    "richTools": "Rich Tooling",
    "richToolsDesc": "A rich ecosystem of tools makes working with JSON simple, with specialized tools for everything from validation to conversion.",
    "levels": {
      "beginner": "Beginner",
      "intermediate": "Intermediate",
      "advanced": "Advanced"
    },
    "comingSoon": "Coming Soon",
    "tooltipComingSoon": "This tutorial is currently being created. Stay tuned!",
    "notFound": "Didn't find the tutorial you were looking for?",
    "addingMore": "We're constantly adding new tutorial content. If you have a specific topic in mind, please let us know!",
    "requestTopic": "Request a Topic",
    "commonQuestions": "Common JSON Questions",
    "questions": {
      "jsObjectDiff": {
        "question": "What's the difference between JSON and JavaScript objects?",
        "answer": "Although JSON is based on JavaScript object syntax, there are several key differences: JSON is a plain text format, while JavaScript objects are living entities; JSON keys must be surrounded by double quotes, JavaScript objects don't require this; JSON doesn't support functions or methods, while JavaScript objects can include methods; JSON doesn't allow comments, JavaScript objects can."
      },
      "validation": {
        "question": "How do I validate if my JSON is valid?",
        "answer": "You can use our JSON validation tool to check the validity of your JSON. Common errors include: missing or extra commas, mismatched quotes, using single quotes instead of double quotes, property names without quotes, etc. Valid JSON must follow strict syntax rules, and our tool will help you identify and fix errors."
      },
      "dataTypes": {
        "question": "What data types does JSON support?",
        "answer": "JSON supports six data types: strings (enclosed in double quotes), numbers (integers or floating-point), booleans (true or false), arrays (ordered collection of values), objects (collection of key-value pairs), and null. JSON doesn't directly support dates, functions, undefined, or regular expressions."
      }
    },
    "relatedTools": {
      "title": "Related Tools",
      "formatter": "JSON Formatter",
      "compressor": "JSON Compressor",
      "validator": "JSON Validator",
      "jsonToXml": "JSON to XML"
    }
  },
  "categories": {
    "basic": {
      "name": "Basic Knowledge",
      "description": "Fundamental concepts and usage of JSON"
    },
    "advanced": {
      "name": "Advanced Techniques",
      "description": "Deep dive into advanced applications and techniques of JSON"
    },
    "conversion": {
      "name": "Conversion Techniques",
      "description": "Methods and tools for converting JSON to and from other formats"
    }
  },
  "localstorage": {
    "pageTitle": "JSON and LocalStorage Tutorial",
    "introduction": {
      "title": "Introduction",
      "description": "LocalStorage is a simple client-side storage mechanism provided by web browsers, allowing persistent storage of key-value pairs in a user's browser. When combined with JSON format, LocalStorage becomes a powerful tool for storing structured data in front-end development.",
      "detailedDescription": "This tutorial will introduce how to use JSON format with LocalStorage to implement local data storage, retrieval, updating, and deletion, as well as common application scenarios and best practices."
    },
    "basics": {
      "title": "LocalStorage Basics",
      "description": "LocalStorage provides a simple key-value storage API where both keys and values must be strings. Its main features include:",
      "feature1": "Data persists between browser sessions (data is not lost after closing the browser)",
      "feature2": "Relatively large storage capacity (typically around 5MB, depending on the browser)",
      "feature3": "Stored data is not automatically sent to the server",
      "feature4": "Same-origin policy restriction (can only access data from the same domain)",
      "basicAPI": "Basic API:"
    },
    "jsonWithLocalstorage": {
      "title": "Using JSON with LocalStorage",
      "description": "Since LocalStorage can only store strings, when we need to store complex data structures (such as objects or arrays), we need to use JSON for conversion:",
      "arrayStorage": "Similarly, we can use JSON to store arrays:"
    },
    "commonPatterns": {
      "title": "Common Usage Patterns",
      "wrapper": "1. Creating a Simple Data Management Wrapper",
      "wrapperDescription": "To make LocalStorage more convenient to use, we can create a simple wrapper:",
      "updatingObjects": "2. Updating Stored Objects",
      "updatingDescription": "When we need to update part of the properties of an already stored object:",
      "arrayManagement": "3. Adding/Removing Array Items",
      "arrayDescription": "Managing arrays stored in LocalStorage:"
    },
    "practicalExamples": {
      "title": "Practical Examples",
      "userPrefs": "Example 1: User Preferences",
      "userPrefsDescription": "Storing and retrieving user interface preferences:",
      "shoppingCart": "Example 2: Shopping Cart",
      "cartDescription": "Creating a simple shopping cart with LocalStorage:",
      "formData": "Example 3: Form Data Persistence",
      "formDescription": "Saving form data to prevent data loss:"
    },
    "limitations": {
      "title": "Limitations and Considerations",
      "description": "When using LocalStorage with JSON, be aware of these limitations:",
      "storageLimit": "Storage Limit: LocalStorage typically has a limit of about 5MB per domain",
      "stringOnly": "String-Only Storage: LocalStorage can only store strings, requiring JSON conversion for complex data",
      "noExpiration": "No Expiration Mechanism: LocalStorage has no built-in expiration feature",
      "synchronous": "Synchronous API: LocalStorage operations are synchronous and can block the main thread",
      "securityPrivacy": "Security and Privacy: Don't store sensitive information in LocalStorage",
      "browserSupport": "Browser Support: While widely supported, some privacy settings or incognito mode may limit access",
      "serialization": "Serialization Limitations: JSON cannot serialize all JavaScript data types (like functions or circular references)"
    },
    "bestPractices": {
      "title": "Best Practices",
      "errorHandling": "Use Error Handling",
      "errorDescription": "Always use try-catch when parsing JSON from LocalStorage:",
      "namespacing": "Use Namespacing",
      "namespaceDescription": "Use prefixes for your keys to avoid conflicts:",
      "versioning": "Consider Versioning",
      "versioningDescription": "Add version information to handle data structure changes:",
      "fallbacks": "Provide Fallbacks",
      "fallbacksDescription": "Always handle cases when data isn't available:"
    },
    "alternatives": {
      "title": "Alternatives to LocalStorage",
      "description": "Depending on your needs, you might consider these alternatives:",
      "sessionStorage": "SessionStorage: Similar API but data is cleared when the session ends",
      "indexedDB": "IndexedDB: More powerful database for client-side storage with larger capacity",
      "cookies": "Cookies: Smaller capacity but can be used for server-side interaction",
      "webSQL": "Web SQL: SQL-based database (deprecated but still works in some browsers)",
      "cacheAPI": "Cache API: Part of Service Workers, useful for offline-first applications",
      "firebase": "Firebase Realtime Database/Firestore: Cloud-based alternatives with synchronization",
      "comparison": "Comparison table:"
    },
    "debugging": {
      "title": "Debugging LocalStorage",
      "description": "Tips for debugging LocalStorage issues:",
      "browserTools": "Use Browser DevTools",
      "toolsDescription": "Browser developer tools provide ways to inspect and modify LocalStorage:",
      "directAccess": "Directly access LocalStorage in the console:",
      "logging": "Add logging",
      "loggingDescription": "Add logging to track LocalStorage operations:",
      "clearingData": "Clearing data",
      "clearingDescription": "When testing, you may need to clear LocalStorage:"
    },
    "conclusion": {
      "title": "Conclusion",
      "description": "The combination of JSON and LocalStorage provides a powerful way to store structured data in the browser. By following the patterns and best practices described in this tutorial, you can effectively implement client-side data persistence for your web applications.",
      "keyConcepts": "Key concepts learned:",
      "concept1": "How to convert JavaScript objects and arrays to JSON for storage",
      "concept2": "Creating helper utilities to simplify LocalStorage interaction",
      "concept3": "Managing complex data structures in LocalStorage",
      "concept4": "Implementing common patterns like shopping carts and user preferences",
      "concept5": "Understanding limitations and alternatives to LocalStorage",
      "furtherReading": "For more advanced usage, consider exploring the IndexedDB API or state management libraries that integrate with local storage."
    },
    "tutorials": {
      "title": "Related Tutorials",
      "otherTutorials": "Check out our other related tutorials:",
      "jsonBasics": "JSON Basics",
      "jsonSchema": "JSON Schema Validation",
      "jsonAPIs": "Using JSON with APIs"
    }
  },
  "jsonPath": {
    "description": "Use JSONPath to query and manipulate JSON data"
  },
  "jsonApi": {
    "description": "Learn to design and build JSON-based APIs"
  },
  "jsonToCode": {
    "description": "Convert JSON data to code in various programming languages",
    "pageTitle": "JSON to Code Converter",
    "introduction": {
      "title": "Introduction to JSON to Code",
      "description": "JSON to code conversion is a common process in software development that transforms JSON data structures into programming language classes or types. This approach enhances type safety and improves developer experience."
    },
    "benefits": {
      "title": "Benefits of JSON to Code Conversion",
      "typeSafety": "Type safety: Typed classes help avoid runtime errors",
      "intellisense": "Better IDE intellisense/autocompletion",
      "maintainability": "Improved maintainability through well-defined data structures",
      "validation": "Simplified validation and error handling",
      "refactoring": "Support for code refactoring tools"
    },
    "approaches": {
      "title": "Conversion Approaches",
      "manualCreation": "Manual creation: Define classes based on known JSON structures",
      "manualDesc": "Suitable for simple or infrequently changing JSON structures",
      "codeGeneration": "Code generation: Automatically create classes from JSON examples or schemas",
      "codeGenDesc": "Recommended for complex or frequently changing JSON structures",
      "dynamicDeserialization": "Dynamic deserialization: Use runtime reflection",
      "dynamicDesc": "Useful when the structure is not known in advance"
    },
    "languages": {
      "title": "Supported Languages",
      "description": "JSON to code conversion can be applied to many programming languages:",
      "typescript": "TypeScript - Powerful type system and interfaces",
      "csharp": "C# - Data modeling with classes and properties",
      "java": "Java - POJO classes and Jackson/GSON annotations",
      "python": "Python - Data classes or Pydantic models",
      "golang": "Go - Structs and tags",
      "kotlin": "Kotlin - Data classes"
    },
    "implementation": {
      "title": "Implementation Methods",
      "description": "There are several common approaches to converting JSON to code:",
      "manualApproach": "Manual approach",
      "manualDescription": "For simple JSON structures, you can directly write the corresponding classes:",
      "toolApproach": "Tool-based approach",
      "toolDescription": "For more complex structures, using automated tools is recommended:",
      "onlineTools": "Online tools",
      "onlineDescription": "Online tools for converting JSON samples to code in various languages:"
    },
    "bestPractices": {
      "title": "Best Practices",
      "naming": "Consider naming conventions",
      "namingDescription": "JSON and programming language naming conventions may differ. Convert from JSON's camelCase or snake_case to the language's conventions.",
      "validation": "Add validation",
      "validationDescription": "Add data validation logic in generated classes to prevent runtime errors.",
      "partialData": "Handle partial data",
      "partialDescription": "Implement strategies for handling cases where JSON data is incomplete.",
      "versioning": "Version management",
      "versioningDescription": "Plan an upgrade path when JSON structure changes over time."
    }
  },
  "tutorials": "Tutorials"
} 