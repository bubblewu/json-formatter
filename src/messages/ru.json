{
  "title": "JSON Форматер",
  "subtitle": "Онлайн-инструмент для форматирования, проверки и сжатия JSON",
  "description": "Бесплатный онлайн-инструмент для форматирования JSON, который позволяет форматировать, проверять, сжимать и экранировать данные JSON, помогая разработчикам более эффективно обрабатывать данные JSON.",
  "formatBtn": "Форматировать",
  "compressBtn": "Сжать",
  "clearBtn": "Очистить",
  "uploadBtn": "Загрузить",
  "copyBtn": "Копировать",
  "downloadBtn": "Скачать",
  "historyBtn": "История",
  "backToFormatter": "Вернуться к форматеру",
  "removeEscapeBtn": "Убрать экранирование",
  "fullscreenBtn": "Полный экран",
  "exitFullscreenBtn": "Выйти из полного экрана",
  "inputLabel": "JSON ввод",
  "outputLabel": "Отформатированный результат",
  "language": "Язык",
  "lineNumbers": {
    "show": "Показать номера строк",
    "hide": "Скрыть номера строк"
  },
  "errors": {
    "empty": "JSON не может быть пустым",
    "invalid": "Недопустимый JSON",
    "invalidEscape": "Невозможно удалить экранирующие символы, не является допустимой JSON строкой",
    "notString": "Ввод не является JSON строкой, невозможно удалить экранирующие символы",
    "suggestion": "Предложение исправления",
    "autoFixAvailable": "Эта ошибка может быть исправлена автоматически",
    "clickToFix": "Нажмите, чтобы применить это исправление",
    "applyFix": "Применить исправление"
  },
  "success": {
    "formatted": "JSON успешно отформатирован",
    "compressed": "JSON успешно сжат",
    "copied": "Скопировано в буфер обмена",
    "unescaped": "Экранирующие символы успешно удалены",
    "noEscapeNeeded": "Строка не нуждается в снятии экранирования",
    "fixApplied": "Исправление применено"
  },
  "jsonErrors": {
    "unexpectedToken": "Неожиданный токен",
    "expected": "Ожидалось",
    "inPosition": "в JSON на позиции",
    "clearMarkError": "Ошибка при очистке маркеров",
    "setMarkError": "Ошибка при установке маркеров",
    "fullscreenError": "Ошибка в полноэкранном режиме",
    "saveHistoryError": "Ошибка при сохранении истории",
    "getHistoryError": "Ошибка при получении истории",
    "clearHistoryError": "Ошибка при очистке истории"
  },
  "suggestions": {
    "checkSyntax": "Проверьте синтаксис вашего JSON, особенно соответствие скобок, фигурных скобок и кавычек",
    "missingClosingBracket": "Отсутствует закрывающая скобка или фигурная скобка",
    "missingClosingQuote": "Отсутствует закрывающая кавычка",
    "incompleteJson": "Неполный JSON, проверьте наличие отсутствующих частей",
    "missingQuotesAroundKey": "Имена свойств должны быть заключены в двойные кавычки",
    "trailingComma": "В JSON не допускаются запятые в конце",
    "missingComma": "Отсутствует запятая между значениями",
    "singleQuotes": "В JSON требуются двойные кавычки вместо одинарных",
    "booleanCase": "Логические значения должны быть в нижнем регистре: {value}",
    "nullCase": "Значение null должно быть в нижнем регистре",
    "unescapedQuote": "Кавычки внутри строк должны быть экранированы"
  },
  "footer": {
    "copyright": "© 2025 JSON Форматер | Ваш помощник в эффективности"
  },
  "languages": {
    "en": "Английский",
    "zh": "Китайский",
    "ja": "Японский",
    "ko": "Корейский",
    "es": "Испанский",
    "de": "Немецкий",
    "fr": "Французский",
    "ru": "Русский"
  },
  "history": {
    "title": "Записи истории",
    "empty": "Нет записей истории",
    "noResults": "Не найдено соответствующих записей",
    "clear": "Очистить историю",
    "copy": "Копировать",
    "searchPlaceholder": "Поиск по истории...",
    "timeFilter": {
      "all": "Все",
      "today": "Сегодня",
      "week": "На этой неделе",
      "month": "В этом месяце"
    },
    "format": "Форматировать",
    "compress": "Сжать",
    "unescape": "Снять экранирование",
    "operations": {
      "format": "Форматировать",
      "compress": "Сжать",
      "unescape": "Снять экранирование"
    },
    "time": {
      "today": "Сегодня {time}",
      "yesterday": "Вчера {time}",
      "daysAgo": "{days} дней назад {time}"
    }
  },
  "feedbackBtn": "Обратная связь",
  "feedback": {
    "title": "Обратная связь",
    "content": "Содержание обратной связи",
    "contentPlaceholder": "Пожалуйста, введите вашу обратную связь...",
    "contact": "Контакт (По желанию)",
    "contactPlaceholder": "Пожалуйста, введите ваш email или другую контактную информацию",
    "submit": "Отправить обратную связь",
    "submitting": "Отправка...",
    "cancel": "Отмена",
    "success": "Спасибо за вашу обратную связь!",
    "error": "Не удалось отправить, пожалуйста, попробуйте позже",
    "validation": {
      "required": "Пожалуйста, заполните это поле",
      "invalidEmail": "Пожалуйста, введите действительный адрес электронной почты"
    }
  },
  "showDemoBtn": "Показать демо",
  "hideDemoBtn": "Скрыть демо",
  "share": "Поделиться",
  "shareMenu": {
    "title": "Поделиться в",
    "open": "Открыть меню поделиться",
    "close": "Закрыть меню поделиться"
  },
  "stats": {
    "totalVisits": "Всего посещений",
    "onlineUsers": "Пользователей онлайн"
  },
  "breadcrumb": {
    "home": "Главная",
    "history": "История",
    "contact": "Контакты",
    "privacy": "Политика конфиденциальности",
    "terms": "Условия использования",
    "beautify": "Приукрасить",
    "minify": "Сжать",
    "validate": "Проверить",
    "tutorials": "Учебники",
    "json-schema": "Учебник JSON Schema",
    "json-basics": "Основы JSON",
    "json-formats": "Лучшие практики форматирования JSON",
    "json-vs-xml": "JSON против XML",
    "json-localstorage": "JSON и LocalStorage",
    "json-path": "JSONPath",
    "json-api": "Дизайн JSON API",
    "json-to-code": "JSON в код",
    "blog": "Блог"
  },
  "basics": {
    "pageTitle": "Основы JSON - Типы данных, синтаксис и структура",
    "introduction": {
      "description": "JSON (JavaScript Object Notation) - это легкий формат обмена данными, который легко читать и писать для людей, а также легко анализировать и генерировать для машин. Этот учебник поможет вам всесторонне понять основы JSON, включая правила синтаксиса, типы данных и структуру."
    },
    "whatIsJson": {
      "title": "Что такое JSON?",
      "description": "JSON - это текстовый, удобочитаемый формат обмена данными, предложенный Дугласом Крокфордом в начале 2000-х годов. Его полное название - JavaScript Object Notation, и он происходит из языка JavaScript, но теперь это формат данных, независимый от языка, поддерживаемый практически всеми современными языками программирования.",
      "keyFeatures": {
        "title": "Ключевые особенности",
        "item1": "Легкий - Более компактный, чем форматы вроде XML, более эффективный для передачи и анализа",
        "item2": "Самоописываемый - Четкий формат, легкий для понимания",
        "item3": "Независимый от языка - Почти все языки программирования имеют библиотеки для работы с JSON",
        "item4": "Текстовый - Использует кодировку Unicode, может представлять многоязычный контент",
        "item5": "Структурированный - Поддерживает вложенные данные, способен выражать сложные отношения данных"
      }
    },
    "jsonSyntax": {
      "title": "Синтаксис JSON",
      "description": "Синтаксис JSON очень прост, с всего несколькими основными правилами:",
      "rule1": "Данные представлены в виде пар ключ-значение, в формате \"ключ\": значение",
      "rule2": "Элементы данных разделяются запятыми",
      "rule3": "Объекты (неупорядоченный набор пар ключ-значение) представлены фигурными скобками {}",
      "rule4": "Массивы (упорядоченный список значений) представлены квадратными скобками []",
      "rule5": "Все ключи должны быть заключены в двойные кавычки",
      "completeExample": "Вот полный пример, включающий различные элементы JSON:",
      "validJson": "Это действительный объект JSON, включающий строки, числа, логические значения, массивы, вложенные объекты и null."
    },
    "jsonDataTypes": {
      "title": "Типы данных JSON",
      "description": "JSON поддерживает следующие шесть типов данных:",
      "string": "Строка",
      "stringDescription": "Текстовые данные, должны быть заключены в двойные кавычки, поддерживает экранирующие символы.",
      "number": "Число",
      "numberDescription": "Целое число или число с плавающей точкой, не поддерживает нечисловые значения (например, NaN или Infinity).",
      "boolean": "Логическое значение",
      "booleanDescription": "true или false (должны быть в нижнем регистре).",
      "null": "Null",
      "nullDescription": "Представляет пустое или отсутствующее значение, используя null (должно быть в нижнем регистре).",
      "object": "Объект",
      "objectDescription": "Неупорядоченная коллекция пар ключ-значение, ключи должны быть строками, значения могут быть любыми типами данных JSON.",
      "array": "Массив",
      "arrayDescription": "Упорядоченная коллекция значений, может содержать любые типы данных JSON, даже разные типы в одном массиве.",
      "noteTitle": "Важные примечания",
      "noteDescription": "JSON имеет некоторые важные ограничения, которые отличают его от других форматов:",
      "noteItem1": "Не поддерживает комментарии",
      "noteItem2": "Все имена ключей должны быть заключены в двойные кавычки, не в одинарные",
      "noteItem3": "Не поддерживает значения undefined",
      "noteItem4": "Не поддерживает напрямую типы дат (должны быть преобразованы в строки или числа)",
      "noteItem5": "Не поддерживает функции или методы"
    },
    "jsonStructure": {
      "title": "Структура JSON",
      "description": "Гибкость JSON позволяет представлять сложные вложенные структуры данных, включая многоуровневые вложенные объекты и массивы. Это делает его очень подходящим для представления практически любого типа данных.",
      "exampleDescription": "Ниже приведен пример более сложной структуры JSON, демонстрирующий, как организовать многоуровневые данные:",
      "exampleExplanation": "Этот пример показывает, как JSON может представлять сложные структуры данных через вложенные объекты и массивы. Каталог продуктов содержит категории, категории содержат продукты, а продукты содержат подробную информацию, такую как спецификации и списки цветов."
    },
    "commonMistakes": {
      "title": "Распространенные ошибки",
      "description": "При работе с JSON есть некоторые распространенные ошибки, которых следует избегать:",
      "commonErrors": "Распространенные синтаксические ошибки JSON",
      "error1": "Использование одинарных кавычек вместо двойных",
      "error1Description": "JSON требует, чтобы все строки (включая имена ключей) использовали двойные кавычки.",
      "error2": "Лишние запятые после последнего элемента",
      "error2Description": "JSON не позволяет ставить запятые после последнего элемента, что отличается от некоторых языков программирования.",
      "error3": "Отсутствие кавычек вокруг имен свойств",
      "error3Description": "Все имена свойств объекта должны быть в двойных кавычках, в отличие от объектов JavaScript, где их можно опустить.",
      "error4": "Добавление комментариев в JSON",
      "error4Description": "JSON не поддерживает комментарии; любая форма комментария вызовет ошибки при разборе.",
      "bestPractices": "Лучшие практики",
      "bestPractice1": "Используйте инструменты проверки",
      "bestPractice1Description": "Всегда используйте инструменты проверки JSON, чтобы убедиться, что ваш JSON действителен.",
      "bestPractice2": "Используйте инструменты форматирования",
      "bestPractice2Description": "Форматирование JSON может улучшить читаемость и упростить обнаружение ошибок.",
      "bestPractice3": "Обращайте внимание на типы данных",
      "bestPractice3Description": "Убедитесь, что вы используете правильные типы данных, особенно различая строки и числа.",
      "bestPractice4": "Осторожно обрабатывайте экранирующие символы",
      "bestPractice4Description": "Правильно экранируйте специальные символы, особенно кавычки и обратные слеши внутри строк.",
      "bestPractice5": "Понимайте особенности библиотек разбора",
      "bestPractice5Description": "Библиотеки разбора JSON в разных языках могут иметь тонкие различия; понимайте специфическое поведение используемой вами библиотеки."
    },
    "toolsLibraries": {
      "title": "Инструменты и библиотеки JSON",
      "description": "Существует множество инструментов и библиотек, которые могут помочь вам в работе с JSON:",
      "onlineTools": "Онлайн-инструменты",
      "tool1": "JSON форматер",
      "tool1Description": "Форматирует данные JSON для улучшения читаемости.",
      "tool2": "JSON валидатор",
      "tool2Description": "Проверяет правильность синтаксиса JSON.",
      "tool3": "Инструмент сравнения JSON",
      "tool3Description": "Сравнивает различия между двумя объектами JSON.",
      "tool4": "Конвертер JSON",
      "tool4Description": "Конвертирует между JSON и другими форматами (такими как XML, CSV).",
      "programmingLibraries": "Программные библиотеки",
      "library1": "JavaScript",
      "library1Item1": "Встроенные JSON.parse() и JSON.stringify()",
      "library1Item2": "Lodash - предоставляет больше функциональности для манипуляций с JSON",
      "library1Item3": "json5 - расширенная версия JSON, поддерживающая комментарии",
      "library2": "Python",
      "library2Item1": "Встроенный модуль json",
      "library2Item2": "simplejson - более продвинутая библиотека JSON",
      "library2Item3": "ujson - высокопроизводительный кодировщик и декодер JSON",
      "library3": "Java",
      "library3Item1": "Jackson - богатая функциями библиотека обработки JSON",
      "library3Item2": "Gson - библиотека JSON, разработанная Google",
      "library3Item3": "JSON-java - легковесная библиотека JSON"
    },
    "conclusion": {
      "title": "Заключение",
      "description": "В ходе этого учебника вы изучили основы JSON, включая:",
      "item1": "Основные понятия и особенности JSON",
      "item2": "Правила синтаксиса JSON и типы данных",
      "item3": "Как создавать и разбирать сложные структуры JSON",
      "item4": "Распространенные ошибки и лучшие практики",
      "item5": "Полезные инструменты и библиотеки JSON",
      "finalDescription": "Овладение JSON - это необходимый навык в современной разработке программного обеспечения. С распространением API и обмена данными, эти знания будут часто использоваться на протяжении всей вашей карьеры разработчика. Продолжайте изучение наших других учебников, чтобы узнать больше о продвинутых темах JSON."
    },
    "returnToTutorials": "Вернуться к списку учебников",
    "nextTutorial": "Следующий учебник: JSON Schema"
  },
  "schema": {
    "pageTitle": "Учебник JSON Schema",
    "pageDescription": "Изучите JSON Schema, как проверять данные JSON и реализовывать JSON Schema в ваших приложениях",
    "introduction": {
      "title": "Введение в JSON Schema",
      "description": "JSON Schema - это словарь, который позволяет аннотировать и проверять документы JSON. Он помогает определить структуру, содержание и правила проверки данных JSON."
    },
    "basics": {
      "title": "Основы JSON Schema",
      "description": "JSON Schema сам по себе является документом JSON. Схема определяет:"
    }
  },
  "formats": {
    "pageTitle": "Лучшие практики форматирования JSON",
    "introduction": {
      "title": "Почему важно форматирование JSON",
      "description": "Хотя синтаксис JSON прост, хорошие привычки форматирования необходимы для улучшения читаемости, поддерживаемости и уменьшения ошибок. Будь то создание ответов API, конфигурационных файлов или хранилища данных, следование последовательным правилам форматирования облегчает вам и членам вашей команды работу с данными JSON."
    },
    "conclusion": {
      "title": "Заключение",
      "description": "Хорошие практики форматирования JSON не только делают ваши данные более читаемыми, но и уменьшают ошибки и улучшают поддерживаемость. Следуя руководствам в этом учебнике и используя соответствующие инструменты, вы можете убедиться, что ваши данные JSON хорошо структурированы, последовательны и просты в работе.",
      "nextSteps": "Продолжайте исследовать наши другие учебники по JSON, чтобы узнать больше о работе с данными JSON в различных контекстах."
    }
  },
  "localstorage": {
    "pageTitle": "JSON и LocalStorage",
    "introduction": {
      "title": "Введение",
      "description": "LocalStorage — это простой механизм хранения данных на стороне клиента, предоставляемый веб-браузерами, который позволяет постоянно хранить пары ключ-значение в браузере пользователя. В сочетании с форматом JSON, LocalStorage становится мощным инструментом для хранения структурированных данных во фронтенд-разработке.",
      "detailedDescription": "В этом руководстве рассматривается, как использовать формат JSON с LocalStorage для реализации сохранения, получения, обновления и удаления локальных данных, а также общие шаблоны приложений и лучшие практики."
    },
    "basics": {
      "title": "Основы LocalStorage",
      "description": "LocalStorage предоставляет простой API хранения ключ-значение, где и ключ, и значение должны быть строками. Основные характеристики включают:",
      "feature1": "Данные сохраняются между сессиями браузера (данные не теряются после закрытия браузера)",
      "feature2": "Относительно большая емкость хранилища (обычно около 5 МБ в зависимости от браузера)",
      "feature3": "Сохраненные данные не отправляются автоматически на сервер",
      "feature4": "Ограничения политики одинакового происхождения (доступ только к данным из того же домена)",
      "basicAPI": "Базовый API:"
    },
    "jsonWithLocalstorage": {
      "title": "Использование JSON с LocalStorage",
      "description": "Поскольку LocalStorage может хранить только строки, если вам нужно сохранить сложные структуры данных, такие как объекты или массивы, вам необходимо использовать JSON для преобразования:",
      "arrayStorage": "Аналогично вы можете хранить массивы с использованием JSON:"
    },
    "commonPatterns": {
      "title": "Общие шаблоны использования",
      "wrapper": "1. Создание простой обертки управления данными",
      "wrapperDescription": "Для более удобного использования LocalStorage вы можете создать простую обертку:",
      "updatingObjects": "2. Обновление сохраненных объектов",
      "updatingDescription": "Когда вам нужно обновить только некоторые свойства уже сохраненного объекта:",
      "arrayManagement": "3. Добавление/удаление элементов массива",
      "arrayDescription": "Управление массивами, хранящимися в LocalStorage:"
    },
    "practicalExamples": {
      "title": "Практические примеры",
      "userPrefs": "Пример 1: Пользовательские настройки",
      "userPrefsDescription": "Сохранение и получение настроек пользовательского интерфейса:",
      "shoppingCart": "Пример 2: Корзина покупок",
      "cartDescription": "Создание простой корзины покупок с использованием LocalStorage:",
      "formData": "Пример 3: Сохранение данных формы",
      "formDescription": "Сохранение данных формы для предотвращения потери данных:"
    },
    "limitations": {
      "title": "Ограничения и соображения",
      "description": "При использовании JSON с LocalStorage следует учитывать следующие ограничения:",
      "storageLimit": "Лимит хранилища: LocalStorage обычно ограничен примерно 5 МБ на домен",
      "stringOnly": "Только строковое хранилище: LocalStorage может хранить только строки, для сложных данных требуется преобразование JSON",
      "noExpiration": "Отсутствие механизма истечения срока действия: в LocalStorage нет встроенной функции истечения срока действия",
      "synchronous": "Синхронный API: операции LocalStorage являются синхронными и могут блокировать основной поток",
      "securityPrivacy": "Безопасность и конфиденциальность: не хранить конфиденциальную информацию в LocalStorage",
      "browserSupport": "Поддержка браузерами: широко поддерживается, но может быть ограничена некоторыми настройками конфиденциальности или режимами инкогнито",
      "serialization": "Ограничения сериализации: JSON не может сериализовать все типы данных JavaScript (например, функции, циклические ссылки)"
    },
    "bestPractices": {
      "title": "Лучшие практики",
      "errorHandling": "Используйте обработку ошибок",
      "errorDescription": "Всегда используйте try-catch при разборе JSON из LocalStorage:",
      "namespacing": "Используйте пространства имен",
      "namespaceDescription": "Используйте префиксы для ключей, чтобы избежать конфликтов:",
      "versioning": "Рассмотрите возможность версионирования",
      "versioningDescription": "Добавьте информацию о версии для обработки изменений структуры данных:",
      "fallbacks": "Предоставляйте резервные варианты",
      "fallbacksDescription": "Всегда обрабатывайте случаи, когда данные недоступны:"
    },
    "alternatives": {
      "title": "Альтернативы LocalStorage",
      "description": "В зависимости от ваших потребностей вы можете рассмотреть следующие альтернативы:",
      "sessionStorage": "SessionStorage: похожий API, но данные очищаются при закрытии сессии",
      "indexedDB": "IndexedDB: мощная клиентская база данных для большего объема хранения",
      "cookies": "Cookies: меньшая емкость, но могут использоваться для взаимодействия на стороне сервера",
      "webSQL": "Web SQL: база данных на основе SQL (устаревшая, но все еще работает в некоторых браузерах)",
      "cacheAPI": "Cache API: часть Service Workers, полезна для приложений, ориентированных на оффлайн-работу",
      "firebase": "Firebase Realtime Database/Firestore: облачная альтернатива с возможностями синхронизации",
      "comparison": "Сравнительная таблица:"
    },
    "debugging": {
      "title": "Отладка LocalStorage",
      "description": "Советы по отладке проблем с LocalStorage:",
      "browserTools": "Использование инструментов разработчика браузера",
      "toolsDescription": "Инструменты разработчика браузера предоставляют способы проверки и изменения LocalStorage:",
      "directAccess": "Прямой доступ к LocalStorage в консоли:",
      "logging": "Добавление логирования",
      "loggingDescription": "Добавление логирования для отслеживания операций с LocalStorage:",
      "clearingData": "Очистка данных",
      "clearingDescription": "Если вам нужно очистить LocalStorage во время тестирования:"
    },
    "conclusion": {
      "title": "Заключение",
      "description": "Комбинация JSON и LocalStorage предоставляет мощный способ хранения структурированных данных в браузере. Следуя шаблонам и лучшим практикам, описанным в этом руководстве, вы можете эффективно реализовать постоянное хранение данных на стороне клиента в ваших веб-приложениях.",
      "keyConcepts": "Ключевые концепции, которые вы изучили:",
      "concept1": "Как преобразовывать объекты и массивы JavaScript в JSON для хранения",
      "concept2": "Создание вспомогательных утилит для упрощения взаимодействия с LocalStorage",
      "concept3": "Управление сложными структурами данных в LocalStorage",
      "concept4": "Реализация общих шаблонов, таких как корзина покупок и пользовательские настройки",
      "concept5": "Понимание ограничений LocalStorage и его альтернатив",
      "furtherReading": "Для более продвинутого использования рассмотрите API IndexedDB и библиотеки управления состоянием, которые интегрируются с локальным хранилищем."
    },
    "tutorials": {
      "title": "Связанные руководства",
      "otherTutorials": "Ознакомьтесь с другими связанными руководствами:",
      "jsonBasics": "Основы JSON",
      "jsonSchema": "Проверка JSON Schema",
      "jsonAPIs": "Использование JSON с API"
    }
  },
  "xmlcompare": {
    "pageTitle": "JSON против XML",
    "introduction": {
      "title": "Введение",
      "description": "JSON (JavaScript Object Notation) и XML (eXtensible Markup Language) - это два распространенных формата обмена данными. Хотя оба используются для передачи данных между различными системами, они имеют значительные различия в синтаксисе, структуре и сценариях использования."
    },
    "detailedDescription": "Этот учебник детально сравнивает эти два формата и поможет вам понять их преимущества и недостатки, чтобы вы могли выбрать наиболее подходящий формат данных для вашего проекта.",
    "syntaxComparison": {
      "title": "Сравнение синтаксиса",
      "description": "Ниже приведено сравнение JSON и XML, представляющих одни и те же данные:",
      "jsonFormat": "Формат JSON:",
      "xmlFormat": "Формат XML:"
    },
    "syntaxDifferences": {
      "description": "Из приведенного выше примера вы можете увидеть основные синтаксические различия между двумя форматами:",
      "item1": "JSON использует фигурные скобки {{}} для объектов и квадратные скобки [[]] для массивов",
      "item2": "XML использует пользовательские теги и вложенные структуры",
      "item3": "JSON более лаконичен, с меньшим количеством символов",
      "item4": "XML использует открывающие и закрывающие теги, что делает структуру более ясной, но подробной"
    },
    "keyDifferences": {
      "title": "Ключевые различия",
      "columns": {
        "feature": "Особенность",
        "json": "JSON",
        "xml": "XML"
      },
      "syntax": {
        "name": "Синтаксис",
        "json": "Лаконичный, основан на парах ключ-значение",
        "xml": "Основан на тегах, с открывающими и закрывающими тегами"
      },
      "fileSize": {
        "name": "Размер файла",
        "json": "Меньше",
        "xml": "Больше"
      },
      "parsingSpeed": {
        "name": "Скорость анализа",
        "json": "Быстрее",
        "xml": "Медленнее"
      },
      "dataTypes": {
        "name": "Типы данных",
        "json": "Поддерживает строки, числа, логические значения, массивы, объекты и null",
        "xml": "Все данные - строки, требует дополнительных определений схемы"
      },
      "commentSupport": {
        "name": "Поддержка комментариев",
        "json": "Не поддерживается",
        "xml": "Поддерживается"
      },
      "namespace": {
        "name": "Пространство имен",
        "json": "Не поддерживается",
        "xml": "Поддерживается"
      },
      "readability": {
        "name": "Читаемость",
        "json": "Лучше для простых структур данных",
        "xml": "Лучше для сложных структур данных"
      },
      "languageSupport": {
        "name": "Поддержка языков",
        "json": "Родная поддержка в JavaScript, библиотеки в других языках",
        "xml": "Библиотеки доступны во всех основных языках программирования"
      },
      "validation": {
        "name": "Валидация",
        "json": "Через JSON Schema",
        "xml": "Через DTD, XSD"
      }
    },
    "jsonAdvantages": {
      "title": "Преимущества JSON",
      "lightweight": "Легкий: файлы JSON обычно меньше, чем эквивалентные файлы XML, экономя пропускную способность и место для хранения",
      "easyParsing": "Простой анализ: большинство языков программирования имеют встроенные или сторонние библиотеки для анализа JSON",
      "readableWritable": "Легко читать и писать: простой синтаксис, легко понятный для людей и программ",
      "javascriptIntegration": "Естественная интеграция с JavaScript: особенно полезно в веб-приложениях",
      "fasterParsing": "Более быстрая скорость анализа: особенно в среде JavaScript",
      "arraySupport": "Поддержка массивов: родная поддержка структур массивов",
      "popularInApis": "Популярен в API: большинство современных веб-API используют JSON как формат обмена данными"
    },
    "xmlAdvantages": {
      "title": "Преимущества XML",
      "validation": "Строгая валидация: обеспечивает строгую проверку данных через DTD или XSD",
      "namespaces": "Поддержка пространств имен: может использовать различные словари XML в одном документе",
      "queryLanguage": "Богатый язык запросов: XPath и XQuery предоставляют мощные возможности запросов",
      "comments": "Поддержка комментариев: можно добавлять комментарии в документы XML, улучшая читаемость",
      "complexData": "Представление сложных данных: лучше подходит для представления сложных иерархий и смешанного содержимого",
      "ecosystem": "Зрелая экосистема: имеет большое количество зрелых инструментов и технологий",
      "selfDescribing": "Самоописательный: документы XML обычно более самоописательны, включая метаданные"
    },
    "whenToUseJson": {
      "title": "Когда использовать JSON",
      "description": "JSON является лучшим выбором в следующих ситуациях:",
      "webApps": "Веб-приложения и разработка API",
      "fastParsing": "Сценарии, требующие быстрого анализа",
      "simpleStructures": "Относительно простые структуры данных",
      "javascript": "Среды JavaScript (браузеры, Node.js)",
      "mobileApps": "Связь с мобильными приложениями",
      "configFiles": "Конфигурационные файлы (например, package.json)",
      "bandwidth": "Большие объемы данных, где важна экономия пропускной способности"
    },
    "whenToUseXml": {
      "title": "Когда использовать XML",
      "description": "XML является лучшим выбором в следующих ситуациях:",
      "strictValidation": "Требуется строгая проверка данных",
      "complexStructures": "Сложные структуры документов",
      "namespaceNeeded": "Необходимо использовать пространства имен",
      "commentsNeeded": "Необходимо поддерживать комментарии",
      "documentOriented": "Приложения, ориентированные на документы (такие как форматы файлов Word, Excel)",
      "soapServices": "Веб-сервисы SOAP",
      "xsltNeeded": "Необходимо использовать XSLT для преобразования данных"
    },
    "conversion": {
      "title": "Преобразование между JSON и XML",
      "description": "Иногда вам может потребоваться конвертировать данные между этими двумя форматами. Многие онлайн-инструменты и программные библиотеки могут помочь вам с этой задачей:",
      "ourTool": "Наш инструмент конвертации JSON в XML",
      "libraries": "Программные библиотеки, такие как xml2js в Node.js",
      "xslt": "XSLT можно использовать для преобразования XML в JSON",
      "note": "При конвертации обратите внимание, что из-за структурных различий между двумя форматами, конвертированная структура данных может отличаться от исходной структуры."
    },
    "conclusion": {
      "title": "Заключение",
      "description": "JSON и XML имеют свои преимущества и недостатки. Выбор формата должен основываться на ваших конкретных потребностях:",
      "chooseJson": "Выбирайте JSON, если важны простота, скорость анализа и совместимость с JavaScript",
      "chooseXml": "Выбирайте XML, если вам нужна строгая валидация данных, сложные структуры документов или поддержка пространств имен",
      "modernDev": "В современной веб-разработке JSON стал основным форматом обмена данными, особенно в RESTful API. XML по-прежнему занимает важное место в корпоративных приложениях, системах документов и сценариях, требующих строгой валидации данных.",
      "finalThought": "Понимание преимуществ и недостатков обоих форматов поможет вам делать более обоснованный выбор технологий в ваших проектах."
    }
  },
  "tutorials": "Учебники",
  "tutorialsPage": {
    "description": "Овладейте JSON от основ до продвинутых техник с нашими учебниками и руководствами. Будь вы новичок или профессиональный разработчик, здесь вы найдете подходящий контент.",
    "whyLearnJson": "Почему стоит изучать JSON?",
    "webStandard": "Веб-стандарт",
    "webStandardDesc": "JSON - это стандартный формат для современных веб-API и обмена данными, поддерживаемый практически всеми языками программирования.",
    "lightweight": "Легкий и эффективный",
    "lightweightDesc": "По сравнению с форматами вроде XML, JSON легче и быстрее анализируется, идеален для передачи данных между фронтендом и бэкендом.",
    "richTools": "Богатый набор инструментов",
    "richToolsDesc": "Богатая экосистема инструментов упрощает работу с JSON, от валидации до конвертации.",
    "levels": {
      "beginner": "Начальный",
      "intermediate": "Средний",
      "advanced": "Продвинутый"
    },
    "comingSoon": "Скоро",
    "tooltipComingSoon": "Этот учебник в настоящее время создается. Следите за обновлениями!",
    "notFound": "Не нашли нужный учебник?",
    "addingMore": "Мы постоянно добавляем новый учебный контент. Если у вас есть конкретная тема в уме, дайте нам знать!",
    "requestTopic": "Запросить тему",
    "commonQuestions": "Частые вопросы о JSON",
    "questions": {
      "jsObjectDiff": {
        "question": "В чем разница между JSON и объектами JavaScript?",
        "answer": "Хотя JSON основан на синтаксисе объектов JavaScript, есть несколько ключевых различий: JSON - это текстовый формат, в то время как объекты JavaScript - это живые сущности; ключи JSON должны быть заключены в двойные кавычки, для объектов JavaScript это не требуется; JSON не поддерживает функции или методы, в то время как объекты JavaScript могут включать методы; JSON не допускает комментариев, объекты JavaScript могут."
      },
      "validation": {
        "question": "Как проверить, является ли мой JSON действительным?",
        "answer": "Вы можете использовать наш инструмент проверки JSON для проверки действительности вашего JSON. Распространенные ошибки включают: отсутствующие или лишние запятые, несоответствующие кавычки, использование одинарных кавычек вместо двойных, имена свойств без кавычек и т.д. Действительный JSON должен следовать строгим правилам синтаксиса, и наш инструмент поможет вам выявить и исправить ошибки."
      },
      "dataTypes": {
        "question": "Какие типы данных поддерживает JSON?",
        "answer": "JSON поддерживает шесть типов данных: строки (заключенные в двойные кавычки), числа (целые или с плавающей точкой), логические значения (true или false), массивы (упорядоченные коллекции значений), объекты (коллекции пар ключ-значение) и null. JSON не поддерживает напрямую даты, функции, undefined или регулярные выражения."
      }
    },
    "relatedTools": {
      "title": "Связанные инструменты",
      "formatter": "Форматер JSON",
      "compressor": "Компрессор JSON",
      "validator": "Валидатор JSON",
      "jsonToXml": "JSON в XML"
    }
  },
  "categories": {
    "basic": {
      "name": "Базовые знания",
      "description": "Фундаментальные концепции и использование JSON"
    },
    "advanced": {
      "name": "Продвинутые техники",
      "description": "Глубокое погружение в продвинутые приложения и техники JSON"
    },
    "conversion": {
      "name": "Техники конвертации",
      "description": "Методы и инструменты для конвертации JSON в другие форматы и обратно"
    }
  },
  "jsonPath": {
    "description": "Используйте JSONPath для запросов и манипуляции данными JSON"
  },
  "jsonApi": {
    "description": "Научитесь проектировать и строить API на основе JSON"
  },
  "jsonToCode": {
    "description": "Преобразование данных JSON в код на различных языках программирования",
    "pageTitle": "Конвертер JSON в код",
    "introduction": {
      "title": "Введение в преобразование JSON в код",
      "description": "Преобразование JSON в код - это распространенный процесс в разработке программного обеспечения, который трансформирует структуры данных JSON в классы или типы языков программирования. Этот подход улучшает типобезопасность и опыт разработчика."
    },
    "benefits": {
      "title": "Преимущества преобразования JSON в код",
      "typeSafety": "Типобезопасность: Типизированные классы помогают избежать ошибок во время выполнения",
      "intellisense": "Улучшенная автодополнение/IntelliSense в IDE",
      "maintainability": "Повышенная поддерживаемость благодаря четко определенным структурам данных",
      "validation": "Упрощенная валидация и обработка ошибок",
      "refactoring": "Поддержка инструментов рефакторинга кода"
    },
    "approaches": {
      "title": "Подходы к преобразованию",
      "manualCreation": "Ручное создание: Определение классов на основе известных структур JSON",
      "manualDesc": "Подходит для простых или редко меняющихся структур JSON",
      "codeGeneration": "Генерация кода: Автоматическое создание классов из примеров или схем JSON",
      "codeGenDesc": "Рекомендуется для сложных или часто меняющихся структур JSON",
      "dynamicDeserialization": "Динамическая десериализация: Использование рефлексии во время выполнения",
      "dynamicDesc": "Полезно, когда структура заранее неизвестна"
    },
    "languages": {
      "title": "Поддерживаемые языки",
      "description": "Преобразование JSON в код может применяться ко многим языкам программирования:",
      "typescript": "TypeScript - Мощная система типов и интерфейсы",
      "csharp": "C# - Моделирование данных с помощью классов и свойств",
      "java": "Java - POJO-классы и аннотации Jackson/GSON",
      "python": "Python - Классы данных или модели Pydantic",
      "golang": "Go - Структуры и теги",
      "kotlin": "Kotlin - Классы данных"
    },
    "implementation": {
      "title": "Методы реализации",
      "description": "Существует несколько общих подходов к преобразованию JSON в код:",
      "manualApproach": "Ручной подход",
      "manualDescription": "Для простых структур JSON вы можете напрямую написать соответствующие классы:",
      "toolApproach": "Подход на основе инструментов",
      "toolDescription": "Для более сложных структур рекомендуется использовать автоматизированные инструменты:",
      "onlineTools": "Онлайн-инструменты",
      "onlineDescription": "Онлайн-инструменты для преобразования образцов JSON в код на различных языках:"
    },
    "bestPractices": {
      "title": "Лучшие практики",
      "naming": "Учитывайте соглашения об именовании",
      "namingDescription": "Соглашения об именовании JSON и языков программирования могут отличаться. Преобразуйте camelCase или snake_case из JSON в соглашения языка.",
      "validation": "Добавляйте валидацию",
      "validationDescription": "Добавляйте логику проверки данных в сгенерированные классы для предотвращения ошибок во время выполнения.",
      "partialData": "Обрабатывайте частичные данные",
      "partialDescription": "Реализуйте стратегии для обработки случаев, когда данные JSON неполные.",
      "versioning": "Управление версиями",
      "versioningDescription": "Планируйте путь обновления, когда структура JSON меняется со временем."
    }
  },
  "tutorials": "Учебники"
} 