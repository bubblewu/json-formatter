{
  "title": "Formateur JSON",
  "subtitle": "Outil en ligne pour formater, valider et compresser JSON",
  "description": "Outil en ligne gratuit pour formater JSON, permettant de formater, valider, compresser et échapper les données JSON, aidant les développeurs à traiter les données JSON plus efficacement.",
  "formatBtn": "Formater",
  "compressBtn": "Compresser",
  "clearBtn": "Effacer",
  "uploadBtn": "Importer",
  "copyBtn": "Copier",
  "downloadBtn": "Télécharger",
  "historyBtn": "Historique",
  "backToFormatter": "Retour au formateur",
  "removeEscapeBtn": "Supprimer échappement",
  "fullscreenBtn": "Plein écran",
  "exitFullscreenBtn": "Quitter plein écran",
  "inputLabel": "Entrée JSON",
  "outputLabel": "Résultat formaté",
  "language": "Langue",
  "lineNumbers": {
    "show": "Afficher numéros de ligne",
    "hide": "Masquer numéros de ligne"
  },
  "errors": {
    "empty": "JSON ne peut pas être vide",
    "invalid": "JSON invalide",
    "invalidEscape": "Impossible de supprimer les caractères d'échappement, ce n'est pas une chaîne JSON valide",
    "notString": "L'entrée n'est pas une chaîne JSON, impossible de supprimer les caractères d'échappement",
    "suggestion": "Suggestion de correction",
    "autoFixAvailable": "Cette erreur peut être corrigée automatiquement",
    "clickToFix": "Cliquez pour appliquer cette correction",
    "applyFix": "Appliquer la Correction"
  },
  "success": {
    "formatted": "JSON formaté avec succès",
    "compressed": "JSON compressé avec succès",
    "copied": "Copié dans le presse-papiers",
    "unescaped": "Caractères d'échappement supprimés avec succès",
    "noEscapeNeeded": "La chaîne n'a pas besoin de désactivation d'échappement",
    "fixApplied": "Correction appliquée"
  },
  "jsonErrors": {
    "unexpectedToken": "Jeton inattendu",
    "expected": "Attendu",
    "inPosition": "dans JSON à la position",
    "clearMarkError": "Erreur lors de l'effacement des marqueurs",
    "setMarkError": "Erreur lors de la définition des marqueurs",
    "fullscreenError": "Erreur en mode plein écran",
    "saveHistoryError": "Erreur lors de la sauvegarde de l'historique",
    "getHistoryError": "Erreur lors de la récupération de l'historique",
    "clearHistoryError": "Erreur lors de l'effacement de l'historique"
  },
  "suggestions": {
    "checkSyntax": "Vérifiez votre syntaxe JSON, particulièrement les crochets, accolades et guillemets correspondants",
    "missingClosingBracket": "Crochet ou accolade fermant manquant",
    "missingClosingQuote": "Guillemet fermant manquant",
    "incompleteJson": "JSON incomplet, vérifiez les parties manquantes",
    "missingQuotesAroundKey": "Les noms de propriétés doivent être entourés de guillemets doubles",
    "trailingComma": "Les virgules finales ne sont pas autorisées en JSON",
    "missingComma": "Virgule manquante entre les valeurs",
    "singleQuotes": "JSON nécessite des guillemets doubles au lieu de guillemets simples",
    "booleanCase": "Les valeurs booléennes doivent être en minuscules: {value}",
    "nullCase": "La valeur null doit être en minuscules",
    "unescapedQuote": "Les guillemets à l'intérieur des chaînes doivent être échappés"
  },
  "footer": {
    "copyright": "© 2025 Formateur JSON | Votre Assistant d'Efficacité"
  },
  "languages": {
    "en": "Anglais",
    "zh": "Chinois",
    "ja": "Japonais",
    "ko": "Coréen",
    "es": "Espagnol",
    "de": "Allemand",
    "fr": "Français",
    "ru": "Russe"
  },
  "history": {
    "title": "Enregistrements d'Historique",
    "empty": "Aucun enregistrement",
    "noResults": "Aucun enregistrement correspondant trouvé",
    "clear": "Effacer l'Historique",
    "copy": "Copier",
    "searchPlaceholder": "Rechercher dans l'historique...",
    "timeFilter": {
      "all": "Tous",
      "today": "Aujourd'hui",
      "week": "Cette Semaine",
      "month": "Ce Mois"
    },
    "format": "Formater",
    "compress": "Compresser",
    "unescape": "Désactiver l'Échappement",
    "operations": {
      "format": "Formater",
      "compress": "Compresser",
      "unescape": "Désactiver l'Échappement"
    },
    "time": {
      "today": "Aujourd'hui {time}",
      "yesterday": "Hier {time}",
      "daysAgo": "Il y a {days} jours {time}"
    }
  },
  "feedbackBtn": "Commentaires",
  "feedback": {
    "title": "Commentaires",
    "content": "Contenu des Commentaires",
    "contentPlaceholder": "Veuillez saisir vos commentaires...",
    "contact": "Contact (Optionnel)",
    "contactPlaceholder": "Veuillez saisir votre e-mail ou autre information de contact",
    "submit": "Soumettre les Commentaires",
    "submitting": "Soumission en cours...",
    "cancel": "Annuler",
    "success": "Merci pour vos commentaires !",
    "error": "L'envoi a échoué, veuillez réessayer plus tard",
    "validation": {
      "required": "Veuillez remplir ce champ",
      "invalidEmail": "Veuillez saisir une adresse e-mail valide"
    }
  },
  "showDemoBtn": "Afficher la Démo",
  "hideDemoBtn": "Masquer la Démo",
  "share": "Partager",
  "shareMenu": {
    "title": "Partager sur",
    "open": "Ouvrir le menu de partage",
    "close": "Fermer le menu de partage"
  },
  "stats": {
    "totalVisits": "Visites Totales",
    "onlineUsers": "Utilisateurs en Ligne"
  },
  "breadcrumb": {
    "home": "Accueil",
    "history": "Historique",
    "contact": "Contact",
    "privacy": "Politique de confidentialité",
    "terms": "Conditions d'utilisation",
    "beautify": "Embellir",
    "minify": "Minifier",
    "validate": "Valider",
    "tutorials": "Tutoriels",
    "json-schema": "Tutoriel JSON Schema",
    "json-basics": "Bases de JSON",
    "json-formats": "Meilleures pratiques de formatage JSON",
    "json-vs-xml": "JSON vs XML",
    "json-localstorage": "JSON et LocalStorage",
    "json-path": "JSONPath",
    "json-api": "Conception d'API JSON",
    "json-to-code": "JSON vers code",
    "blog": "Blog"
  },
  "basics": {
    "pageTitle": "Bases de JSON - Types de données, syntaxe et structure",
    "introduction": {
      "description": "JSON (JavaScript Object Notation) est un format léger d'échange de données, facile à lire et à écrire pour les humains, et facile à analyser et à générer pour les machines. Ce tutoriel vous aidera à comprendre pleinement les fondamentaux de JSON, y compris les règles de syntaxe, les types de données et la structure."
    },
    "whatIsJson": {
      "title": "Qu'est-ce que JSON ?",
      "description": "JSON est un format d'échange de données basé sur du texte et lisible par l'homme, proposé par Douglas Crockford au début des années 2000. Son nom complet est JavaScript Object Notation, et il provient du langage JavaScript, mais il est désormais un format de données indépendant du langage, pris en charge par presque tous les langages de programmation modernes.",
      "keyFeatures": {
        "title": "Caractéristiques principales",
        "item1": "Léger - Plus concis que des formats comme XML, plus efficace pour le transfert et l'analyse",
        "item2": "Auto-descriptif - Format clair, facile à comprendre",
        "item3": "Indépendant du langage - Presque tous les langages de programmation ont des bibliothèques pour gérer JSON",
        "item4": "Basé sur le texte - Utilise l'encodage Unicode, peut représenter du contenu multilingue",
        "item5": "Structuré - Prend en charge les données imbriquées, capable d'exprimer des relations de données complexes"
      }
    },
    "jsonSyntax": {
      "title": "Syntaxe JSON",
      "description": "La syntaxe JSON est très simple, avec seulement quelques règles de base :",
      "rule1": "Les données sont représentées sous forme de paires clé-valeur, au format \"clé\": valeur",
      "rule2": "Les éléments de données sont séparés par des virgules",
      "rule3": "Les objets (un ensemble non ordonné de paires clé-valeur) sont représentés par des accolades {{}}",
      "rule4": "Les tableaux (une liste ordonnée de valeurs) sont représentés par des crochets [[]]",
      "rule5": "Toutes les clés doivent être entourées de guillemets doubles",
      "completeExample": "Voici un exemple complet incluant divers éléments JSON :",
      "validJson": "Il s'agit d'un objet JSON valide, comprenant des chaînes, des nombres, des booléens, des tableaux, des objets imbriqués et null."
    },
    "jsonDataTypes": {
      "title": "Types de données JSON",
      "description": "JSON prend en charge les six types de données suivants :",
      "string": "Chaîne de caractères",
      "stringDescription": "Données textuelles, doivent être entourées de guillemets doubles, prend en charge les caractères d'échappement.",
      "number": "Nombre",
      "numberDescription": "Entier ou nombre à virgule flottante, ne prend pas en charge les valeurs non numériques (comme NaN ou Infinity).",
      "boolean": "Booléen",
      "booleanDescription": "true ou false (doit être en minuscules).",
      "null": "Null",
      "nullDescription": "Représente une valeur vide ou inexistante, utilisant null (doit être en minuscules).",
      "object": "Objet",
      "objectDescription": "Une collection non ordonnée de paires clé-valeur, les clés doivent être des chaînes, les valeurs peuvent être de n'importe quel type de données JSON.",
      "array": "Tableau",
      "arrayDescription": "Une collection ordonnée de valeurs, peut contenir n'importe quel type de données JSON, même mélanger différents types.",
      "noteTitle": "Remarques importantes",
      "noteDescription": "JSON présente certaines limitations importantes qui diffèrent des autres formats :",
      "noteItem1": "Ne prend pas en charge les commentaires",
      "noteItem2": "Tous les noms de clés doivent être entourés de guillemets doubles, pas de guillemets simples",
      "noteItem3": "Ne prend pas en charge les valeurs undefined",
      "noteItem4": "Ne prend pas directement en charge les types de date (doivent être convertis en chaînes ou en nombres)",
      "noteItem5": "Ne prend pas en charge les fonctions ou méthodes"
    },
    "jsonStructure": {
      "title": "Structure JSON",
      "description": "La flexibilité de JSON permet de représenter des structures de données imbriquées complexes, y compris des objets et des tableaux imbriqués sur plusieurs niveaux. Cela le rend très adapté pour représenter presque n'importe quel type de données.",
      "exampleDescription": "Voici un exemple de structure JSON plus complexe, démontrant comment organiser des données à plusieurs niveaux :",
      "exampleExplanation": "Cet exemple montre comment JSON peut représenter des structures de données complexes grâce à des objets et des tableaux imbriqués. Le catalogue de produits contient des catégories, les catégories contiennent des produits, et les produits contiennent des informations détaillées telles que des spécifications et des listes de couleurs."
    },
    "commonMistakes": {
      "title": "Erreurs courantes",
      "description": "Lors de l'utilisation de JSON, il existe certaines erreurs courantes à éviter :",
      "commonErrors": "Erreurs de syntaxe JSON courantes",
      "error1": "Utilisation de guillemets simples au lieu de guillemets doubles",
      "error1Description": "JSON exige que toutes les chaînes (y compris les noms de clés) utilisent des guillemets doubles.",
      "error2": "Virgules supplémentaires après le dernier élément",
      "error2Description": "JSON n'autorise pas les virgules après le dernier élément, ce qui diffère de certains langages de programmation.",
      "error3": "Ne pas mettre de guillemets autour des noms de propriétés",
      "error3Description": "Tous les noms de propriétés d'objet doivent avoir des guillemets doubles, contrairement aux objets JavaScript où ils peuvent être omis.",
      "error4": "Ajouter des commentaires dans JSON",
      "error4Description": "JSON ne prend pas en charge les commentaires ; toute forme de commentaire provoquera des erreurs d'analyse.",
      "bestPractices": "Meilleures pratiques",
      "bestPractice1": "Utiliser des outils de validation",
      "bestPractice1Description": "Utilisez toujours des outils de validation JSON pour vérifier si votre JSON est valide.",
      "bestPractice2": "Utiliser des outils de formatage",
      "bestPractice2Description": "Le formatage de JSON peut améliorer la lisibilité et faciliter la détection des erreurs.",
      "bestPractice3": "Faire attention aux types de données",
      "bestPractice3Description": "Assurez-vous d'utiliser les types de données corrects, en particulier pour distinguer les chaînes et les nombres.",
      "bestPractice4": "Gérer soigneusement les caractères d'échappement",
      "bestPractice4Description": "Échappez correctement les caractères spéciaux, notamment les guillemets et les barres obliques inverses dans les chaînes.",
      "bestPractice5": "Comprendre les caractéristiques des bibliothèques d'analyse",
      "bestPractice5Description": "Les bibliothèques d'analyse JSON dans différents langages peuvent présenter des différences subtiles ; comprenez le comportement spécifique de la bibliothèque que vous utilisez."
    },
    "toolsLibraries": {
      "title": "Outils et bibliothèques JSON",
      "description": "Il existe de nombreux outils et bibliothèques qui peuvent vous aider à travailler avec JSON :",
      "onlineTools": "Outils en ligne",
      "tool1": "Formateur JSON",
      "tool1Description": "Formatter les données JSON pour améliorer la lisibilité.",
      "tool2": "Validateur JSON",
      "tool2Description": "Vérifier si la syntaxe JSON est correcte.",
      "tool3": "Outil de comparaison JSON",
      "tool3Description": "Comparer les différences entre deux objets JSON.",
      "tool4": "Convertisseur JSON",
      "tool4Description": "Convertir entre JSON et d'autres formats (comme XML, CSV).",
      "programmingLibraries": "Bibliothèques de programmation",
      "library1": "JavaScript",
      "library1Item1": "JSON.parse() et JSON.stringify() intégrés",
      "library1Item2": "Lodash - Fournit plus de fonctionnalités de manipulation JSON",
      "library1Item3": "json5 - Version étendue de JSON qui prend en charge les commentaires",
      "library2": "Python",
      "library2Item1": "Module json intégré",
      "library2Item2": "simplejson - Bibliothèque JSON plus avancée",
      "library2Item3": "ujson - Encodeur et décodeur JSON haute performance",
      "library3": "Java",
      "library3Item1": "Jackson - Bibliothèque de traitement JSON riche en fonctionnalités",
      "library3Item2": "Gson - Bibliothèque JSON développée par Google",
      "library3Item3": "JSON-java - Bibliothèque JSON légère"
    },
    "conclusion": {
      "title": "Conclusion",
      "description": "À travers ce tutoriel, vous avez appris les bases de JSON, notamment :",
      "item1": "Les concepts de base et les caractéristiques de JSON",
      "item2": "Les règles de syntaxe JSON et les types de données",
      "item3": "Comment créer et analyser des structures JSON complexes",
      "item4": "Les erreurs courantes et les meilleures pratiques",
      "item5": "Les outils et bibliothèques JSON utiles",
      "finalDescription": "Maîtriser JSON est une compétence essentielle dans le développement logiciel moderne. Avec la prévalence des API et des échanges de données, cette connaissance sera fréquemment utilisée tout au long de votre carrière de développeur. Continuez à explorer nos autres tutoriels pour en apprendre davantage sur les sujets avancés concernant JSON."
    },
    "returnToTutorials": "Retour à la liste des tutoriels",
    "nextTutorial": "Tutoriel suivant : JSON Schema"
  },
  "schema": {
    "pageTitle": "Tutoriel JSON Schema",
    "pageDescription": "Apprenez JSON Schema, comment valider les données JSON et mettre en œuvre JSON Schema dans vos applications",
    "introduction": {
      "title": "Introduction à JSON Schema",
      "description": "JSON Schema est un vocabulaire qui permet d'annoter et de valider des documents JSON. Il aide à définir la structure, le contenu et les règles de validation des données JSON."
    },
    "basics": {
      "title": "Fondamentaux de JSON Schema",
      "description": "JSON Schema est lui-même un document JSON. Un schéma définit :"
    }
  },
  "formats": {
    "pageTitle": "Meilleures pratiques de formatage JSON",
    "introduction": {
      "title": "Pourquoi le formatage JSON est important",
      "description": "Bien que la syntaxe JSON soit simple, de bonnes habitudes de formatage sont essentielles pour améliorer la lisibilité, la maintenabilité et réduire les erreurs. Que vous créiez des réponses d'API, des fichiers de configuration ou des stockages de données, suivre des règles de formatage cohérentes facilitera votre travail et celui de votre équipe avec les données JSON."
    },
    "detailedDescription": "Ce tutoriel présentera les meilleures pratiques de formatage JSON, y compris l'indentation, les conventions de nommage, l'organisation des données et l'utilisation d'outils.",
    "indentation": {
      "title": "Indentation et espacement",
      "description": "Une indentation appropriée est essentielle pour améliorer la lisibilité du JSON :",
      "guideline1": "Utilisez une indentation cohérente (2 espaces ou 4 espaces sont des choix courants)",
      "guideline2": "Augmentez l'indentation d'un niveau pour chaque niveau imbriqué",
      "guideline3": "Les accolades et crochets d'ouverture et de fermeture pour les tableaux et objets doivent être alignés",
      "recommended": "Pratique recommandée :",
      "notRecommended": "Pratique non recommandée :"
    },
    "namingConventions": {
      "title": "Conventions de nommage",
      "description": "Des conventions de nommage cohérentes améliorent la lisibilité et la maintenabilité des données JSON :",
      "camelCase": "Utilisez camelCase : C'est la convention de nommage la plus courante en JSON, comme firstName, lastLogin",
      "avoidUnderscores": "Évitez les tirets bas : Bien que certaines API utilisent snake_case, camelCase est plus courant dans les environnements JavaScript",
      "descriptiveNames": "Utilisez des noms descriptifs : Les clés doivent clairement exprimer les données qu'elles contiennent",
      "avoidAbbreviations": "Évitez les abréviations : Utilisez des mots complets sauf si l'abréviation est largement acceptée (comme ID)",
      "consistency": "Maintenez la cohérence : Utilisez la même convention de nommage dans tout votre projet",
      "recommended": "Pratique recommandée :",
      "notRecommended": "Pratique non recommandée :"
    },
    "dataOrganization": {
      "title": "Organisation des données",
      "description": "Une organisation appropriée des structures de données peut améliorer la lisibilité et l'efficacité d'utilisation du JSON :",
      "groupRelated": "Groupez les propriétés liées : Placez les propriétés liées ensemble et utilisez des objets imbriqués pour organiser les données complexes",
      "logicalOrder": "Arrangez les propriétés dans un ordre logique : Placez d'abord les ID ou noms, suivis des informations détaillées",
      "consistentTypes": "Maintenez des types de données cohérents : Par exemple, utilisez toujours le même format pour les dates",
      "arrayItems": "Les éléments dans les tableaux doivent avoir la même structure : Si un tableau contient des objets, ces objets doivent avoir le même ensemble de propriétés"
    },
    "dateNumberFormats": {
      "title": "Formats de date et de nombre",
      "description": "Le formatage des dates et des nombres est crucial pour la cohérence des données :",
      "dateFormats": "Formats de date",
      "useISO": "Utilisez le format standard ISO 8601 : YYYY-MM-DDTHH:mm:ss.sssZ",
      "example": "Par exemple : \"2023-05-15T14:30:00Z\" ou \"2023-05-15\" (date uniquement)",
      "avoidLocalized": "Évitez les formats de date localisés, comme \"05/15/2023\", qui pourraient être interprétés différemment selon les régions",
      "numberFormats": "Formats de nombre",
      "avoidSeparators": "Évitez d'utiliser des séparateurs de milliers (comme 1 000) en JSON",
      "currencyPrecision": "Les valeurs monétaires doivent spécifier une précision (généralement deux décimales)",
      "largeNumbers": "Envisagez de représenter les grands nombres (comme ceux dépassant la plage d'entiers sûrs de JavaScript) sous forme de chaînes"
    },
    "validation": {
      "title": "Validation et vérification",
      "description": "Assurez-vous que votre JSON est correctement formaté et valide :",
      "useTools": "Utilisez des outils de validation : Validez la validité du JSON avec des outils comme JSONLint avant la publication",
      "useSchema": "Utilisez JSON Schema : Définissez des structures de données et des règles de validation",
      "checkErrors": "Vérifiez les erreurs courantes : Comme les virgules manquantes, les virgules supplémentaires, les guillemets non fermés, etc.",
      "autoFormat": "Formatage automatique : Utilisez les fonctionnalités de formatage de l'éditeur pour maintenir la cohérence",
      "ourTool": "Vous pouvez utiliser notre outil de validation JSON pour vérifier si votre JSON est valide."
    },
    "compression": {
      "title": "Compression et embellissement",
      "description": "Choisissez le formatage approprié pour différents scénarios :",
      "devDebug": "Développement et débogage : Utilisez un format embelli (avec indentation et sauts de ligne) pour une meilleure lisibilité",
      "production": "Environnement de production : Utilisez un format compressé (supprimez tous les espaces blancs) pour réduire la taille des données",
      "apiResponses": "Réponses API : Envisagez de fournir des options de format, permettant aux clients de choisir entre formats embelli ou compressé",
      "largeFiles": "Gros fichiers : Utilisez toujours un format compressé pour la transmission et le stockage",
      "beautified": "Format embelli (pour le développement) :",
      "compressed": "Format compressé (pour la production) :"
    },
    "whitespacePlacement": {
      "title": "Placement des espaces blancs",
      "description": "Le placement stratégique des espaces blancs améliore la lisibilité :",
      "afterColons": "Ajoutez un espace après les deux-points dans les paires clé-valeur",
      "afterCommas": "Ajoutez un espace après les virgules dans les tableaux et objets",
      "noExtraSpaces": "N'ajoutez pas d'espaces avant les deux-points ou les virgules",
      "lineBreaks": "Utilisez des sauts de ligne pour séparer les propriétés et les éléments de tableau dans le format embelli",
      "recommended": "Pratique recommandée :",
      "notRecommended": "Pratique non recommandée :"
    },
    "securityConsiderations": {
      "title": "Considérations de sécurité",
      "description": "Soyez prudent lors du formatage de JSON qui pourrait contenir des informations sensibles :",
      "sensitiveData": "N'incluez jamais de données sensibles (mots de passe, clés API, etc.) dans le JSON côté client",
      "validateInput": "Validez et assainissez toujours les entrées JSON provenant de sources externes",
      "avoidComments": "Rappelez-vous que JSON ne prend pas en charge les commentaires - ne les utilisez pas pour 'cacher' des données sensibles",
      "handleErrors": "Implémentez une gestion appropriée des erreurs pour les échecs d'analyse JSON"
    },
    "tools": {
      "title": "Outils de formatage",
      "description": "Plusieurs outils peuvent vous aider à maintenir un formatage JSON cohérent :",
      "onlineTools": "Outils en ligne :",
      "ourFormatter": "Notre formateur JSON : Formatez et embellissez votre JSON en un seul clic",
      "jsonlint": "JSONLint : Validez JSON et identifiez les erreurs de syntaxe",
      "editorPlugins": "Plugins d'éditeur :",
      "vscode": "VS Code : Formatage JSON intégré avec intégration Prettier",
      "webstorm": "WebStorm/IntelliJ IDEA : Support JSON avancé avec options de formatage personnalisables",
      "sublime": "Sublime Text : Divers packages disponibles pour le formatage JSON",
      "cliTools": "Outils en ligne de commande :",
      "jq": "jq : Processeur JSON en ligne de commande avec capacités de formatage",
      "prettier": "Prettier : Formateur de code qui prend en charge JSON et de nombreux autres langages"
    },
    "bestPractices": {
      "title": "Résumé des meilleures pratiques",
      "description": "Pour résumer les points clés des meilleures pratiques de formatage JSON :",
      "point1": "Utilisez une indentation cohérente (2 ou 4 espaces)",
      "point2": "Suivez des conventions de nommage cohérentes (de préférence camelCase)",
      "point3": "Organisez les données liées de manière logique et cohérente",
      "point4": "Utilisez des formats standard pour les dates (ISO 8601) et les nombres",
      "point5": "Validez JSON avant de l'utiliser ou de le publier",
      "point6": "Utilisez un format embelli pour le développement et un format compressé pour la production",
      "point7": "Placez les espaces blancs de manière stratégique pour améliorer la lisibilité",
      "point8": "Tenez compte des implications de sécurité lors du formatage JSON",
      "point9": "Utilisez des outils disponibles pour automatiser et appliquer les règles de formatage"
    },
    "conclusion": {
      "title": "Conclusion",
      "description": "Les bonnes pratiques de formatage JSON ne rendent pas seulement vos données plus lisibles, elles réduisent également les erreurs et améliorent la maintenabilité. En suivant les directives de ce tutoriel et en utilisant les outils appropriés, vous pouvez vous assurer que vos données JSON sont bien structurées, cohérentes et faciles à manipuler.",
      "nextSteps": "Continuez à explorer nos autres tutoriels JSON pour en savoir plus sur le travail avec les données JSON dans différents contextes."
    }
  },
  "localstorage": {
    "pageTitle": "JSON et LocalStorage",
    "introduction": {
      "title": "Introduction",
      "description": "LocalStorage est un mécanisme simple de stockage côté client fourni par les navigateurs web, qui permet de stocker de façon persistante des paires clé-valeur dans le navigateur de l'utilisateur. Combiné avec le format JSON, LocalStorage devient un outil puissant pour stocker des données structurées dans le développement frontend.",
      "detailedDescription": "Ce tutoriel explore comment utiliser le format JSON avec LocalStorage pour implémenter le stockage, la récupération, la mise à jour et la suppression de données locales, ainsi que les modèles d'application courants et les meilleures pratiques."
    },
    "basics": {
      "title": "Principes de base de LocalStorage",
      "description": "LocalStorage fournit une API simple de stockage clé-valeur où la clé et la valeur doivent toutes deux être des chaînes de caractères. Les principales caractéristiques comprennent :",
      "feature1": "Les données persistent entre les sessions de navigation (les données ne sont pas perdues après la fermeture du navigateur)",
      "feature2": "Capacité de stockage relativement importante (généralement environ 5 Mo selon le navigateur)",
      "feature3": "Les données stockées ne sont pas automatiquement envoyées au serveur",
      "feature4": "Restrictions de la politique de même origine (accès uniquement aux données du même domaine)",
      "basicAPI": "API de base :",
      "setItem": "localStorage.setItem(key, value) : Stocke une paire clé-valeur",
      "getItem": "localStorage.getItem(key) : Récupère la valeur pour une clé donnée",
      "removeItem": "localStorage.removeItem(key) : Supprime une paire clé-valeur",
      "clear": "localStorage.clear() : Supprime toutes les paires clé-valeur",
      "accessNotation": "Notation d'accès alternative : localStorage['key'] ou localStorage.key"
    },
    "jsonWithLocalstorage": {
      "title": "Utilisation de JSON avec LocalStorage",
      "description": "Comme LocalStorage ne peut stocker que des chaînes de caractères, si vous devez stocker des structures de données complexes comme des objets ou des tableaux, vous devez utiliser JSON pour la conversion :",
      "arrayStorage": "De même, vous pouvez stocker des tableaux en utilisant JSON :"
    },
    "commonPatterns": {
      "title": "Modèles d'utilisation courants",
      "wrapper": "1. Création d'un wrapper simple de gestion de données",
      "wrapperDescription": "Pour rendre l'utilisation de LocalStorage plus pratique, vous pouvez créer un wrapper simple :",
      "updatingObjects": "2. Mise à jour d'objets stockés",
      "updatingDescription": "Lorsque vous devez mettre à jour uniquement certaines propriétés d'un objet déjà stocké :",
      "arrayManagement": "3. Ajout/suppression d'éléments de tableau",
      "arrayDescription": "Gestion des tableaux stockés dans LocalStorage :"
    },
    "practicalExamples": {
      "title": "Exemples pratiques",
      "userPrefs": "Exemple 1 : Préférences utilisateur",
      "userPrefsDescription": "Stockage et récupération des paramètres d'interface utilisateur :",
      "shoppingCart": "Exemple 2 : Panier d'achat",
      "cartDescription": "Création d'un panier d'achat simple à l'aide de LocalStorage :",
      "formData": "Exemple 3 : Persistance des données de formulaire",
      "formDescription": "Sauvegarde des données de formulaire pour éviter la perte de données :"
    },
    "limitations": {
      "title": "Limitations et considérations",
      "description": "Lors de l'utilisation de JSON avec LocalStorage, tenez compte des limitations suivantes :",
      "storageLimit": "Limite de stockage : LocalStorage est généralement limité à environ 5 Mo par domaine",
      "stringOnly": "Stockage uniquement de chaînes : LocalStorage ne peut stocker que des chaînes, les données complexes nécessitent une conversion JSON",
      "noExpiration": "Pas de mécanisme d'expiration : LocalStorage n'a pas de fonctionnalité d'expiration intégrée",
      "synchronous": "API synchrone : les opérations LocalStorage sont synchrones et peuvent bloquer le thread principal",
      "securityPrivacy": "Sécurité et confidentialité : ne stockez pas d'informations sensibles dans LocalStorage",
      "browserSupport": "Support des navigateurs : largement pris en charge, mais peut être limité par certains paramètres de confidentialité ou modes de navigation privée",
      "serialization": "Limitations de sérialisation : JSON ne peut pas sérialiser tous les types de données JavaScript (par exemple, fonctions, références circulaires)"
    },
    "bestPractices": {
      "title": "Meilleures pratiques",
      "errorHandling": "Utilisez la gestion des erreurs",
      "errorDescription": "Utilisez toujours try-catch lors de l'analyse de JSON depuis LocalStorage :",
      "namespacing": "Utilisez des espaces de noms",
      "namespaceDescription": "Utilisez des préfixes pour vos clés afin d'éviter les conflits :",
      "versioning": "Envisagez le versionnement",
      "versioningDescription": "Ajoutez des informations de version pour gérer les changements de structure de données :",
      "fallbacks": "Fournissez des solutions de repli",
      "fallbacksDescription": "Gérez toujours les cas où les données ne sont pas disponibles :"
    },
    "alternatives": {
      "title": "Alternatives à LocalStorage",
      "description": "Selon vos besoins, vous pourriez envisager les alternatives suivantes :",
      "sessionStorage": "SessionStorage : API similaire, mais les données sont effacées lorsque la session se termine",
      "indexedDB": "IndexedDB : base de données côté client plus puissante pour un stockage plus important",
      "cookies": "Cookies : capacité plus petite, mais peut être utilisé pour les interactions côté serveur",
      "webSQL": "Web SQL : base de données basée sur SQL (obsolète, mais fonctionne encore dans certains navigateurs)",
      "cacheAPI": "Cache API : partie des Service Workers, utile pour les applications offline-first",
      "firebase": "Firebase Realtime Database/Firestore : alternative basée sur le cloud avec des capacités de synchronisation",
      "comparison": "Tableau comparatif :"
    },
    "debugging": {
      "title": "Débogage de LocalStorage",
      "description": "Conseils pour déboguer les problèmes de LocalStorage :",
      "browserTools": "Utilisation des outils de développement du navigateur",
      "toolsDescription": "Les outils de développement du navigateur offrent des moyens d'inspecter et de modifier LocalStorage :",
      "directAccess": "Accès direct à LocalStorage dans la console :",
      "logging": "Ajout de journalisation",
      "loggingDescription": "Ajoutez de la journalisation pour suivre les opérations LocalStorage :",
      "clearingData": "Effacement des données",
      "clearingDescription": "Si vous devez effacer LocalStorage pendant les tests :"
    },
    "conclusion": {
      "title": "Conclusion",
      "description": "La combinaison de JSON et LocalStorage offre un moyen puissant de stocker des données structurées dans le navigateur. En suivant les modèles et les bonnes pratiques décrits dans ce tutoriel, vous pouvez mettre en œuvre efficacement la persistance des données côté client pour vos applications web.",
      "keyConcepts": "Concepts clés appris :",
      "concept1": "Comment convertir des objets et tableaux JavaScript en JSON pour le stockage",
      "concept2": "Création d'utilitaires pour simplifier l'interaction avec LocalStorage",
      "concept3": "Gestion de structures de données complexes dans LocalStorage",
      "concept4": "Implémentation de modèles courants comme les paniers d'achat et les préférences utilisateur",
      "concept5": "Compréhension des limitations et des alternatives à LocalStorage",
      "furtherReading": "Pour une utilisation plus avancée, envisagez d'explorer l'API IndexedDB ou les bibliothèques de gestion d'état qui s'intègrent au stockage local."
    },
    "tutorials": {
      "title": "Tutoriels associés",
      "otherTutorials": "Consultez nos autres tutoriels associés :",
      "jsonBasics": "Fondamentaux JSON",
      "jsonSchema": "Validation avec JSON Schema",
      "jsonAPIs": "Utilisation de JSON avec les APIs"
    }
  },
  "xmlcompare": {
    "pageTitle": "JSON vs XML",
    "introduction": {
      "title": "Introduction",
      "description": "JSON (JavaScript Object Notation) et XML (eXtensible Markup Language) sont deux formats courants d'échange de données. Bien que tous deux soient utilisés pour transmettre des données entre différents systèmes, ils présentent des différences significatives en termes de syntaxe, de structure et de scénarios d'application."
    },
    "detailedDescription": "Ce tutoriel comparera ces deux formats en détail, vous aidant à comprendre leurs avantages et inconvénients, afin que vous puissiez choisir le format de données le plus adapté à votre projet.",
    "syntaxComparison": {
      "title": "Comparaison de syntaxe",
      "description": "Voici une comparaison de JSON et XML représentant les mêmes données :",
      "jsonFormat": "Format JSON :",
      "xmlFormat": "Format XML :"
    },
    "syntaxDifferences": {
      "description": "À partir de l'exemple ci-dessus, vous pouvez voir les principales différences syntaxiques entre les deux formats :",
      "item1": "JSON utilise des accolades {{}} pour les objets et des crochets [[]] pour les tableaux",
      "item2": "XML utilise des balises personnalisées et des structures imbriquées",
      "item3": "JSON est plus concis, avec moins de caractères",
      "item4": "XML utilise des balises d'ouverture et de fermeture, rendant la structure plus claire mais plus verbeuse"
    },
    "keyDifferences": {
      "title": "Différences clés",
      "columns": {
        "feature": "Fonctionnalité",
        "json": "JSON",
        "xml": "XML"
      },
      "syntax": {
        "name": "Syntaxe",
        "json": "Concise, basée sur des paires clé-valeur",
        "xml": "Basée sur des balises, avec balises d'ouverture et de fermeture"
      },
      "fileSize": {
        "name": "Taille de fichier",
        "json": "Plus petite",
        "xml": "Plus grande"
      },
      "parsingSpeed": {
        "name": "Vitesse d'analyse",
        "json": "Plus rapide",
        "xml": "Plus lente"
      },
      "dataTypes": {
        "name": "Types de données",
        "json": "Supporte les chaînes, nombres, booléens, tableaux, objets et null",
        "xml": "Toutes les données sont des chaînes, nécessite des définitions de schéma supplémentaires"
      },
      "commentSupport": {
        "name": "Support des commentaires",
        "json": "Non supporté",
        "xml": "Supporté"
      },
      "namespace": {
        "name": "Espace de noms",
        "json": "Non supporté",
        "xml": "Supporté"
      },
      "readability": {
        "name": "Lisibilité",
        "json": "Meilleure pour les structures de données simples",
        "xml": "Meilleure pour les structures de données complexes"
      },
      "languageSupport": {
        "name": "Support des langages",
        "json": "Support natif en JavaScript, bibliothèques dans d'autres langages",
        "xml": "Bibliothèques disponibles dans tous les principaux langages de programmation"
      },
      "validation": {
        "name": "Validation",
        "json": "Via JSON Schema",
        "xml": "Via DTD, XSD"
      }
    },
    "jsonAdvantages": {
      "title": "Avantages de JSON",
      "lightweight": "Léger : les fichiers JSON sont généralement plus petits que les fichiers XML équivalents, économisant bande passante et espace de stockage",
      "easyParsing": "Analyse simple : la plupart des langages de programmation disposent de bibliothèques intégrées ou tierces pour l'analyse JSON",
      "readableWritable": "Facile à lire et à écrire : syntaxe simple, facilement comprise par les humains et les programmes",
      "javascriptIntegration": "Intégration naturelle avec JavaScript : particulièrement utile dans les applications web",
      "fasterParsing": "Vitesse d'analyse plus rapide : surtout dans les environnements JavaScript",
      "arraySupport": "Support des tableaux : prise en charge native des structures de tableau",
      "popularInApis": "Populaire dans les API : la plupart des API web modernes utilisent JSON comme format d'échange de données"
    },
    "xmlAdvantages": {
      "title": "Avantages de XML",
      "validation": "Validation forte : fournit une validation stricte des données via DTD ou XSD",
      "namespaces": "Support des espaces de noms : peut utiliser différents vocabulaires XML dans le même document",
      "queryLanguage": "Langage de requête riche : XPath et XQuery offrent de puissantes capacités de requête",
      "comments": "Support des commentaires : peut ajouter des commentaires aux documents XML, améliorant la lisibilité",
      "complexData": "Représentation de données complexes : mieux adapté pour représenter des hiérarchies complexes et du contenu mixte",
      "ecosystem": "Écosystème mature : dispose d'un grand nombre d'outils et de technologies matures",
      "selfDescribing": "Auto-descriptif : les documents XML sont généralement plus auto-descriptifs, incluant des métadonnées"
    },
    "whenToUseJson": {
      "title": "Quand utiliser JSON",
      "description": "JSON est un meilleur choix dans les situations suivantes :",
      "webApps": "Applications web et développement d'API",
      "fastParsing": "Scénarios nécessitant une analyse rapide",
      "simpleStructures": "Structures de données relativement simples",
      "javascript": "Environnements JavaScript (navigateurs, Node.js)",
      "mobileApps": "Communication d'applications mobiles",
      "configFiles": "Fichiers de configuration (comme package.json)",
      "bandwidth": "Volumes de données importants où les économies de bande passante sont importantes"
    },
    "whenToUseXml": {
      "title": "Quand utiliser XML",
      "description": "XML est un meilleur choix dans les situations suivantes :",
      "strictValidation": "Une validation stricte des données est requise",
      "complexStructures": "Structures de documents complexes",
      "namespaceNeeded": "Besoin d'utiliser des espaces de noms",
      "commentsNeeded": "Besoin de supporter des commentaires",
      "documentOriented": "Applications orientées document (comme les formats de fichier Word, Excel)",
      "soapServices": "Services Web SOAP",
      "xsltNeeded": "Besoin d'utiliser XSLT pour transformer des données"
    },
    "conversion": {
      "title": "Conversion entre JSON et XML",
      "description": "Parfois, vous pourriez avoir besoin de convertir entre les deux formats. De nombreux outils en ligne et bibliothèques de programmation peuvent vous aider dans cette tâche :",
      "ourTool": "Notre outil de conversion JSON vers XML",
      "libraries": "Bibliothèques de programmation, comme xml2js dans Node.js",
      "xslt": "XSLT peut être utilisé pour convertir XML en JSON",
      "note": "Lors de la conversion, notez qu'en raison des différences structurelles entre les deux formats, la structure de données convertie peut différer de la structure originale."
    },
    "conclusion": {
      "title": "Conclusion",
      "description": "JSON et XML ont chacun leurs propres avantages et inconvénients. Le choix du format doit être basé sur vos besoins spécifiques :",
      "chooseJson": "Choisissez JSON si la simplicité, la vitesse d'analyse et la compatibilité JavaScript sont importantes",
      "chooseXml": "Choisissez XML si vous avez besoin d'une validation stricte des données, de structures de documents complexes ou de la prise en charge des espaces de noms",
      "modernDev": "Dans le développement web moderne, JSON est devenu le format d'échange de données dominant, en particulier dans les API RESTful. XML conserve une place importante dans les applications d'entreprise, les systèmes de documents et les scénarios nécessitant une validation stricte des données.",
      "finalThought": "Comprendre les avantages et les inconvénients des deux formats peut vous aider à faire des choix techniques plus éclairés dans vos projets."
    }
  },
  "tutorials": "Tutoriels",
  "tutorialsPage": {
    "description": "Maîtrisez JSON des fondamentaux aux techniques avancées grâce à nos tutoriels et guides. Que vous soyez débutant ou développeur professionnel, vous trouverez ici du contenu adapté.",
    "whyLearnJson": "Pourquoi apprendre JSON ?",
    "webStandard": "Standard du Web",
    "webStandardDesc": "JSON est le format standard pour les API Web modernes et l'échange de données, pris en charge par presque tous les langages de programmation.",
    "lightweight": "Léger et efficient",
    "lightweightDesc": "Comparé à des formats comme XML, JSON est plus léger et plus rapide à analyser, idéal pour le transfert de données front-end/back-end.",
    "richTools": "Outils abondants",
    "richToolsDesc": "Un riche écosystème d'outils facilite le traitement de JSON, de la validation à la conversion.",
    "levels": {
      "beginner": "Débutant",
      "intermediate": "Intermédiaire",
      "advanced": "Avancé"
    },
    "comingSoon": "Bientôt disponible",
    "tooltipComingSoon": "Ce tutoriel est en cours de création. Restez à l'écoute !",
    "notFound": "Vous n'avez pas trouvé le tutoriel que vous cherchiez ?",
    "addingMore": "Nous ajoutons constamment de nouveaux contenus de tutoriel. Si vous avez un sujet spécifique en tête, faites-le nous savoir !",
    "requestTopic": "Proposer un sujet",
    "commonQuestions": "Questions courantes sur JSON",
    "questions": {
      "jsObjectDiff": {
        "question": "Quelle est la différence entre JSON et les objets JavaScript ?",
        "answer": "Bien que JSON soit basé sur la syntaxe des objets JavaScript, il existe plusieurs différences clés : JSON est un format texte brut, tandis que les objets JavaScript sont des entités vivantes ; les clés JSON doivent être entourées de guillemets doubles, ce qui n'est pas obligatoire pour les objets JavaScript ; JSON ne prend pas en charge les fonctions ou méthodes, contrairement aux objets JavaScript qui peuvent inclure des méthodes ; JSON n'autorise pas les commentaires, alors que les objets JavaScript le peuvent."
      },
      "validation": {
        "question": "Comment valider si mon JSON est valide ?",
        "answer": "Vous pouvez utiliser notre outil de validation JSON pour vérifier la validité de votre JSON. Les erreurs courantes comprennent : virgules manquantes ou superflues, guillemets non correspondants, utilisation de guillemets simples au lieu de guillemets doubles, noms de propriétés sans guillemets, etc. Un JSON valide doit suivre des règles de syntaxe strictes, et notre outil vous aidera à identifier et corriger les erreurs."
      },
      "dataTypes": {
        "question": "Quels types de données JSON supporte-t-il ?",
        "answer": "JSON prend en charge six types de données : chaînes (entre guillemets doubles), nombres (entiers ou à virgule flottante), booléens (true ou false), tableaux (collection ordonnée de valeurs), objets (collection de paires clé-valeur) et null. JSON ne prend pas directement en charge les dates, fonctions, undefined ou expressions régulières."
      }
    },
    "relatedTools": {
      "title": "Outils connexes",
      "formatter": "Formateur JSON",
      "compressor": "Compresseur JSON",
      "validator": "Validateur JSON",
      "jsonToXml": "JSON vers XML"
    }
  },
  "categories": {
    "basic": {
      "name": "Connaissances de base",
      "description": "Concepts fondamentaux et utilisation de JSON"
    },
    "advanced": {
      "name": "Techniques avancées",
      "description": "Analyse approfondie des applications et techniques avancées de JSON"
    },
    "conversion": {
      "name": "Techniques de conversion",
      "description": "Méthodes et outils pour convertir JSON vers et depuis d'autres formats"
    }
  },
  "jsonPath": {
    "description": "Utilisez JSONPath pour interroger et manipuler des données JSON"
  },
  "jsonApi": {
    "description": "Apprenez à concevoir et à construire des API basées sur JSON"
  },
  "jsonToCode": {
    "description": "Convertir des données JSON en code dans différents langages de programmation",
    "pageTitle": "Convertisseur JSON vers Code",
    "introduction": {
      "title": "Introduction à la conversion JSON vers Code",
      "description": "La conversion JSON vers code est un processus courant en développement logiciel qui transforme des structures de données JSON en classes ou types dans un langage de programmation. Cette approche améliore la sécurité de type et l'expérience développeur."
    },
    "benefits": {
      "title": "Avantages de la conversion JSON vers Code",
      "typeSafety": "Sécurité de type : Les classes typées aident à éviter les erreurs d'exécution",
      "intellisense": "Meilleure autocomplétion/IntelliSense dans l'IDE",
      "maintainability": "Maintenabilité améliorée grâce à des structures de données bien définies",
      "validation": "Validation et gestion des erreurs simplifiées",
      "refactoring": "Support pour les outils de refactoring"
    },
    "approaches": {
      "title": "Approches de conversion",
      "manualCreation": "Création manuelle : Définir des classes basées sur des structures JSON connues",
      "manualDesc": "Adapté pour des structures JSON simples ou peu changeantes",
      "codeGeneration": "Génération de code : Créer automatiquement des classes à partir d'exemples JSON ou de schémas",
      "codeGenDesc": "Recommandé pour des structures JSON complexes ou fréquemment modifiées",
      "dynamicDeserialization": "Désérialisation dynamique : Utiliser la réflexion à l'exécution",
      "dynamicDesc": "Utile lorsque la structure n'est pas connue à l'avance"
    },
    "languages": {
      "title": "Langages pris en charge",
      "description": "La conversion JSON vers code peut être appliquée à de nombreux langages de programmation :",
      "typescript": "TypeScript - Système de types puissant et interfaces",
      "csharp": "C# - Modélisation de données avec classes et propriétés",
      "java": "Java - Classes POJO et annotations Jackson/GSON",
      "python": "Python - Classes de données ou modèles Pydantic",
      "golang": "Go - Structures et tags",
      "kotlin": "Kotlin - Classes de données"
    },
    "implementation": {
      "title": "Méthodes d'implémentation",
      "description": "Il existe plusieurs approches courantes pour convertir JSON en code :",
      "manualApproach": "Approche manuelle",
      "manualDescription": "Pour les structures JSON simples, vous pouvez écrire directement les classes correspondantes :",
      "toolApproach": "Approche basée sur des outils",
      "toolDescription": "Pour des structures plus complexes, l'utilisation d'outils automatisés est recommandée :",
      "onlineTools": "Outils en ligne",
      "onlineDescription": "Outils en ligne pour convertir des échantillons JSON en code dans divers langages :"
    },
    "bestPractices": {
      "title": "Meilleures pratiques",
      "naming": "Considérer les conventions de nommage",
      "namingDescription": "Les conventions de nommage JSON et des langages de programmation peuvent différer. Convertissez du camelCase ou snake_case JSON vers les conventions du langage.",
      "validation": "Ajouter de la validation",
      "validationDescription": "Ajoutez de la logique de validation des données dans les classes générées pour éviter les erreurs d'exécution.",
      "partialData": "Gérer les données partielles",
      "partialDescription": "Implémentez des stratégies pour gérer les cas où les données JSON sont incomplètes.",
      "versioning": "Gestion des versions",
      "versioningDescription": "Planifiez un chemin de mise à niveau lorsque la structure JSON évolue avec le temps."
    }
  },
  "tutorials": "Tutoriels"
} 